UserDetailsService官网详情：
被 DaoAuthenticationProvider 使用，用来 在使用username&password的认证方式进行认证时，获取 username、password以及其他属性

对于 UserDetailsService， Security 提供了 in-memory、JDBC两种实现；
你可以 通过把 自定义的 UserDetailsService 暴露成为一个bean 来 定义自定义的认证逻辑；
例如，下面的代码展示了 自定义的认证 - 假设 CustomUserDetailsService 实现了 UserDetailsService

🐖 只有在 #1 AuthenticationManagerBuilder 没有被填充 并且 #2 没有定义 AuthenticationProviderBean 的时候，下面的代码才会被使用 👇
--- 自定义的 UserDetailsService Bean ---
@Bean
CustomUserDetailsService customUserDetailsService() {
	return new CustomUserDetailsService();
}

===
UserDetails官网详情：

被 UserDetailsService 返回。
DaoAuthenticationProvider 会校验 UserDetails，然后
返回一个包含有 principal的 Authentication(其中的principal 其实就是 由配置的 UserDetailsService所返回的 UserDetails)

===
PasswordEncoder官网详情：

Security 对 Servlet的支持 包括 通过集成PasswordEncoder 来 安全地存储密码。
同样地，通过暴露一个 PasswordEncoder Bean，开发者 可以定制 被Security所使用的 PasswordEncoder的实现。

======
DaoAuthenticationProvider 官网详情

是：一个 AuthenticationProvider的实现类；
作用：使用 UserDetailsService 与  PasswordEncoder 来 认证 username 与 password；
工作原理/流程：
#1 用于认证的Filter(具体是哪个Filter 由存储的方式决定) 会 向 ProviderManager(一个AuthenticationManager实现) 传入一个 token对象；
#2 ProviderManager 被配置 使用 DaoAuthenticationProvider 实现类；
#3 DaoAuthenticationProvider 从 UserDetailsService 来 查找 UserDetails；
#4 provider 使用 PasswordEncoder 来 校验 #3中所返回的UserDetails中的密码；
#5 认证成功后，返回一个 usernamePasswordAuthenticationToken对象(Authentication实例)；
    它的principal 就是 所配置的UserDetailsService所返回的 UserDetails。
    最终，返回的 Authentication实例 会被 #1中的认证Filter 给设置到 SecurityContextHolder中去。