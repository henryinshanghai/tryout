Security的 InMemoryUserDetailsManager 实现了 UserDetailsService接口 来
提供 对 存储于内存中的、 username/password方式的认证 的支持

通过实现 UserDetailsService接口， InMemoryUserDetailsManager提供了 对 UserDetails 的管理
当 Security 被配置成 接收username&password来进行认证时，Security就会使用 ”基于UserDetails“的认证手段。

===
用法（开发者）

下面的例子中，使用 来 编码password的值，并且 获取到了编码后的密码 {bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW
@Bean
public UserDetailsService users() {
	UserDetails user = User.builder()
		.username("user")
		.password("{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW")
		.roles("USER")
		.build();
	UserDetails admin = User.builder()
		.username("admin")
		.password("{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW")
		.roles("USER", "ADMIN")
		.build();
	return new InMemoryUserDetailsManager(user, admin);
}

上面的（preceding）代码示例  用一种安全的方式 来存储密码，但是 从入门体验的角度来说，它还有很多需要改进的地方。

下面的例子，我们使用 User.withDefaultPasswordEncoder 来 确保 内存中存储的密码是受保护的
然而，这种方式没办法保护 通过反编译源码来获取密码的手段。
处于这个原因，User.withDefaultPasswordEncoder 只应该用在 ”入门教程“中，而不应该用在生产环境中。

@Bean
public UserDetailsService users() {
	// The builder will ensure the passwords are encoded before saving in memory
	UserBuilder users = User.withDefaultPasswordEncoder();
	UserDetails user = users
		.username("user")
		.password("password")
		.roles("USER")
		.build();
	UserDetails admin = users
		.username("admin")
		.password("password")
		.roles("USER", "ADMIN")
		.build();
	return new InMemoryUserDetailsManager(user, admin);
}


如果想要使用 XML配置的方式 来 使用 User.withDefaultPasswordEncoder，则：没有很好的手段。
如果只是为了 demo或者入门演示，则：你可以选择 以{noop}来作为密码的前缀 - 这表明 不应该使用任何的编码动作
<user-service>
	<user name="user"
		password="{noop}password"
		authorities="ROLE_USER" />
	<user name="admin"
		password="{noop}password"
		authorities="ROLE_USER,ROLE_ADMIN" />
</user-service>