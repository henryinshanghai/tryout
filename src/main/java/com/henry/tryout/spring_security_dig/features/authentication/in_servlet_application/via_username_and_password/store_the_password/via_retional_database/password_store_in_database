Security’s JdbcDaoImpl 实现了 UserDetailsService
来 提供 对 使用JDBC获取的 username&password认证方式的支持

JdbcUserDetailsManager 继承了 JdbcDaoImpl
来 通过 UserDetailsManager接口 实现 对 UserDetails的管理

当 Security 被配置成 接收username&password来进行认证时，Security就会使用 ”基于UserDetails“的认证手段。

接下来讨论：
#1 Security JDBC Authentication默认使用的 Schema
#2 设置数据源；
#3 JdbcUserDetailsManager Bean实例；

===
默认的Schema

Security 为 基于JDBC的认证 提供了默认查询；
这个部分提供了 默认查询对应的默认Schema。
开发者 需要调整schema 来 匹配对查询做出的定制化 以及 开发者所使用的数据库方言

#1 名字叫做 User的 schema:
JdbcDaoImpl 需要数据表 来 加载密码、账号状态（开启或禁用）以及user的一堆权限（角色）；
🐖 默认的schema 也会通过 一个名字叫做 org/springframework/security/core/userdetails/jdbc/users.ddl 的classpath资源 暴露出来

--- 默认提供的schema ---
create table users(
	username varchar_ignorecase(50) not null primary key,
	password varchar_ignorecase(500) not null,
	enabled boolean not null
);

create table authorities (
	username varchar_ignorecase(50) not null,
	authority varchar_ignorecase(50) not null,
	constraint fk_authorities_users foreign key(username) references users(username)
);
create unique index ix_auth_username on authorities (username,authority);

--- 使用Oracle数据库时的User Schema（需要一些调整） ---
CREATE TABLE USERS (
    USERNAME NVARCHAR2(128) PRIMARY KEY,
    PASSWORD NVARCHAR2(128) NOT NULL,
    ENABLED CHAR(1) CHECK (ENABLED IN ('Y','N') ) NOT NULL
);


CREATE TABLE AUTHORITIES (
    USERNAME NVARCHAR2(128) NOT NULL,
    AUTHORITY NVARCHAR2(128) NOT NULL
);
ALTER TABLE AUTHORITIES ADD CONSTRAINT AUTHORITIES_UNIQUE UNIQUE (USERNAME, AUTHORITY);
ALTER TABLE AUTHORITIES ADD CONSTRAINT AUTHORITIES_FK1 FOREIGN KEY (USERNAME) REFERENCES USERS (USERNAME) ENABLE;

#2 名字叫做 Group的Schema：
如果你的应用程序使用了 Group，那你就需要提供 groups shcema。

--- 默认提供的 Group Schema ---
create table groups (
	id bigint generated by default as identity(start with 0) primary key,
	group_name varchar_ignorecase(50) not null
);

create table group_authorities (
	group_id bigint not null,
	authority varchar(50) not null,
	constraint fk_group_authorities_group foreign key(group_id) references groups(id)
);

create table group_members (
	id bigint generated by default as identity(start with 0) primary key,
	username varchar(50) not null,
	group_id bigint not null,
	constraint fk_group_members_group foreign key(group_id) references groups(id)
);

===
设置数据源
在配置 JdbcUserDetailsManager之前，需要先创建一个 DataSource
这里，我们设置了一个 使用默认的user schema 来初始化的 内嵌的 DataSource

@Bean
DataSource dataSource() {
	return new EmbeddedDatabaseBuilder()
		.setType(H2)
		.addScript(JdbcDaoImpl.DEFAULT_USER_SCHEMA_DDL_LOCATION)
		.build();
}

在生产环境中，你需要设置一个 到外部数据库的连接；

===
JdbcUserDetailsManager Bean实例

在这个示例中，我们使用 Spring Boot CLI 来 编码一个password的值
并 获取编码后的密码 {bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW

@Bean
UserDetailsManager users(DataSource dataSource) {
	UserDetails user = User.builder()
		.username("user")
		.password("{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW")
		.roles("USER")
		.build();
	UserDetails admin = User.builder()
		.username("admin")
		.password("{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW")
		.roles("USER", "ADMIN")
		.build();
	JdbcUserDetailsManager users = new JdbcUserDetailsManager(dataSource);
	users.createUser(user);
	users.createUser(admin);
	return users;
}