http请求 -> DispatcherServlet:
#1 根据请求类型，获取到 请求所对应的 handlerExecutionChain；
#2 使用 适配器adapter 来 执行handler；
#3 把handler返回的 ModelAndView 交给视图解析器解析；
#4 渲染视图后，返回给 http的请求方。

=== 判断是否应该对http请求进行异步处理? ===
手段：使用返回值的类型；

== SpringMVC执行流程 ==
//调度入口
//方法路径 org.springframework.web.servlet.DispatcherServlet#doDispatch
protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {
    // 获取处理当前请求的handler
    mappedHandler = getHandler(processedRequest);
    // 获取执行当前请求的handler的adapter
    HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());
    // 开始调度
    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());
}

== handler处理http请求的步骤01 - 获取返回值类型 ==
//方法路径 org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod#invokeAndHandle
public void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,
    Object... providedArgs) throws Exception {

    //获取返回值
    Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);
    this.returnValueHandlers.handleReturnValue(
    returnValue,
    getReturnValueType(returnValue), //获取返回值类型
    mavContainer, webRequest);
}

== handler处理http请求的步骤02 - 根据返回值类型 来 获取实际处理请求的handler ==
//方法路径 org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite#handleReturnValue
public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,
      ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {

    //根据返回值类型获取实际处理handler
    HandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType);
    if (handler == null) {
    throw new IllegalArgumentException("Unknown return value type: " + returnType.getParameterType().getName());
    }
    //开始调用
    handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);
}

debug结果可知：handler的类型是CallableMethodReturnValueHandler
== handler处理http请求的步骤03 - 使用得到的handler 来 真正地执行 返回值为Callable的请求 ==
//方法路径 org.springframework.web.servlet.mvc.method.annotation.CallableMethodReturnValueHandler#handleReturnValue
public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,
    ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {
    Callable<?> callable = (Callable<?>) returnValue;
    //开始执行
    WebAsyncUtils.getAsyncManager(webRequest).startCallableProcessing(callable, mavContainer);
}