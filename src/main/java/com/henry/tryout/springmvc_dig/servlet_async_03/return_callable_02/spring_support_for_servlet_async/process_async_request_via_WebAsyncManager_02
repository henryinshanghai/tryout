=== 起点：    WebAsyncUtils.getAsyncManager(webRequest).startCallableProcessing(callable, mavContainer); ===

== WebAsyncManager对http请求进行异步处理 ==
public void startCallableProcessing(Callable<?> callable, Object... processingContext) throws Exception {
    Assert.notNull(callable, "Callable must not be null");
    // 将callable包装为WebAsyncTask然后调用重载方法
    startCallableProcessing(new WebAsyncTask(callable), processingContext);
}

== 重载方法对 webAsyncTask的处理 ==
特征：
#1 callable将由taskExecutor任务执行器执行，并将获取到的异步结果作为再一次发起调度的入参； 特征：不过这次的入参是返回值Callable的泛型
#2 setConcurrentResultAndDispatch()这个方法会再次发起调度； 特征：它会使用 ”容器的调度器“ 将请求再次分派到容器执行请求过程
    最终 再一次调用了入口方法org.springframework.web.servlet.DispatcherServlet#doDispatch
#3 如果你的泛型还是Callable那么这次调度还是异步的（因为上面这段代码被复用了）- 直到泛型类型不是{Callable、WebAsyncTask、DeferredResult}等 “需要异步处理的类型”为止
解释： 假如你的返回值是Callable<Callable<Callable<String>>>，那么他将会执行三次异步调度，第四次调度后结束
public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext)
   throws Exception {
        try {
            Future<?> future = this.taskExecutor.submit(() -> {
            Object result = null;
            try {
                 //获取异步结果
                 result = callable.call();
            }
            catch (Throwable ex) {
                result = ex;
            }
            finally {
                result = interceptorChain.applyPostProcess(this.asyncWebRequest, callable, result);
            }
            //再次发起调度
            setConcurrentResultAndDispatch(result);
        });
    }
}

