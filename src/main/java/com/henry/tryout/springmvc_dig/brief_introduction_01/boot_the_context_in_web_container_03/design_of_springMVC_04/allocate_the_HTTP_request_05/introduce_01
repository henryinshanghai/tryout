--- 回到 DispatcherServlet ---
作用回顾：
    #1 建立了自己所持有的IoC容器；(Servlet对象 会持有 自己专属的上下文)
    #2 负责分发HTTP请求。

fact：在MVC框架初始化完成之后， 就能够在 Servlet的doService()方法中 完成对HTTP请求的处理。
原理：DispatcherServlet 是 Servlet的子类，因此 会在doService()方法中 来 响应HTTP请求。

fact:按照 Spring MVC的使用， 业务逻辑的调用入口 是在Handler的handler()函数中实现的。
这是连接 Spring MVC 与 应用的业务逻辑实现的地方。

doService()代码实现：
-- org.springframework.web.servlet.DispatcherServlet.doService() --
具体作用：
    #1 暴露 DispatcherServlet专属的 请求属性；
    #2 并 把真正的dispatching 委托到doDispatch()上。

高层次作用：使框架对象 对于 handlers与view对象可用；
书本：对HTTP请求参数 进行快照处理
request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());
request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);
request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);
request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());

try {
    // 请求分发的入口
    doDispatch(request, response);
}

-- doDispatcher()方法：用于真正地分发请求 --
作用：
    #1 准备 ModelAndView；
    #2 调用 getHandler 来 响应HTTP请求；
    #3 通过执行 Handler的处理? 来 得到返回的ModelAndView的结果；
    #4 最后把 ModelAndView对象 交给对应的视图对象 去呈现。
评论：这是 MVC模式的核心实现；

注释：
    处理 发送到handler的真实调度（dispatching）

特征：
    #1 通过 按照顺序应用 servlet的 HandleMapping 来 获取到handler对象。
    #2 通过查询 servlet所安装的 HandlerAdapters 来 查找到第一个 ”支持handler class的adapter“，进而 获取到HandlerAdapter。
    #3 所有的HTTP方法 都会被这个方法处理。

由 HandlerAdapters 与 handlers本身 来 决定 哪个方法是可以被接受的。

核心代码：
try { // 这里为试图准备好了一个 ModelAndView对象 - 它最终会持有 handler处理请求的结果
    ModelAndView mv = null;

    // 决定当前请求的 handler
    mappedHandler = getHandler(processedRequest);

    /* 关于拦截器的相关代码似乎被删除掉了 */

    // 注释：为当前的请求决定 handlerAdapter
    // 书本：这里是实际调用handler的地方；
    在执行handler之前， 使用HandlerAdapter先检查 handler的合法性 - handler有没有符合 Spring的编写要求
    handler的处理结果 封装到 ModelAndView对象中 - 为视图提供数据
    HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());

    // 处理 最后修改的header（如果被当前handler所支持的话）
    String method = request.getMethod();
    ...

    // 真正地调用 handler - 实际上触发的是 对Controller的handleRequest()方法的调用
    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());

综上：
可以看到与MVC框架紧密相关的代码：
#1 获取到与HTTP请求相对应的 HandlerExecutionChain；
#2 执行 handler，并把模型数据 展现到视图中；

这里handler的请求处理过程是一个 比较典型的Command模式的应用。

Next：在 DispatcherServlet中，怎样获得 handler？



