--- ContextLoaderListener 认识笔记 ---
作用：#1 启动 根IoC容器； #2 把根IoC容器载入到Web容器中；
特征：是 Spring Web应用程序 加载IoC的入口；

-- contextInitialized() --
初始化 根web应用上下文

- initWebApplicationContext() in ContextLoader -
为给定的 servlet上下文 来 初始化 Spring的web应用上下文。
使用 构建时所提供的应用上下文 或者 根据 contextClass 以及 contextConfigurationLocation 这两个上下文参数 来 创建一个新的上下文。
参数：当前的 servlet上下文；
返回值：新的 web应用上下文。

加载过程的具体步骤（自然语言）：
    #1 从 Servlet事件中得到 ServletContext；
    #2 读取配置在 web.xml中的各个相关的属性值；
    #3 使用 ContextLoader 来 实例化 WebApplicationContext;
    #4 使用 ContextLoader 再来 完成 上下文的载入&初始化过程。
        特征：
            #1 这里被初始化的上下文会被作为 根上下文；
            #2 #1中的根上下文被载入后，会被绑定到 Web应用程序的ServletContext上。
                作用：开发者就能够使用 WebApplicationContextUtils类的静态方法 来 获得根上下文。
                用于获取到根上下文的具体方法：
                    WebApplicationContextUtils.getWebApplicationContext(javax.servlet.ServletContext)(ServletContext sc)

--- 根上下文具体的载入过程 ---
class ContextLoaderListener extends ContextLoader implements ServletContextListener

-- implements ServletContextListener 接口说明 --
注释：
    这个接口的实现类 会收到 web应用所属的servlet上下文发生变动的通知。
    如果想要接收到通知事件，实现类必须要 在web应用的部署描述符 中进行配置。

书本：
    特征：这个接口里的函数 会结合Web容器的生命周期被调用。
    原理：
        #1 由于 ServletContextListener 是 ServletContext的监听者，因此
            如果 ServletContext发生变化，就会触发相应的事件。
        #2 由于 监听器一直在对这些个事件进行监听，因此
            如果 监听器接收到了具体的事件，就会做出预先设计好的响应动作。
    ServletContext的变化列表：{#1 当服务器启动时，ServletContext被创建; #2 当服务器关闭时, ServletContext被销毁;}
    目标：为了能够对以上事件(ServletContext状态的变化)进行响应；
    手段：在监听器中定义 对应的事件响应的回调方法。
    示例：
        #1 服务器启动时， ServletContextListener的 contextInitialized()方法被调用；
        #2 服务器将要关闭时，ServletContextListener的 contextDestroyed()方法被调用。

recap：以上是 Web容器中监听器的工作原理;

-- Next: 服务器启动时，ContextLoaderListener的调用 具体完成了什么工作? --