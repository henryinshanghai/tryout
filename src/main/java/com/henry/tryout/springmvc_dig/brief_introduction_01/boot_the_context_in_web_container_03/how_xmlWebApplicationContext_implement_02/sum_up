--- 回顾 ---
浏览 XmlWebApplicationContext源码可知：
#1 基本的上下文功能(IoC容器)都已经 通过类的继承（哪个类？） 获取到了；
#2 待完成的工作是：获取Bean的定义信息；
    具体来说：开发者/Spring 要怎么从Web容器环境（比如此处指定的 /WEB-INF/applicationContext.xml）中获取Bean定义的信息。
#3 获取到 Bean定义信息之后，使用 XmlBeanDefinitionReader 来 载入Bean定义信息到Spring IoC容器中【checked】。

至此，"整个上下文的初始化过程"结束。

---
以上，就是 “Web容器中，IoC容器的启动过程”。
这个过程 与 “在应用中启动IoC容器”的方式 很相似。
不同的是，需要考虑到 Web容器的环境特点，比如：
    #1 各种参数的设置；
    #2 IoC容器 需要与 Web容器的ServletContext 相结合，绑定到 Web容器的生命周期中；

fact：在初始化IoC容器/上下文之后，这个上下文就会被存储到 ServletContext中。
由此就建立起了一个 全局的、关于整个应用的 上下文, aka, 应用上下文。

应用：启动 Spring MVC，DispatcherServlet在做上下文初始化时，会把上述”全局的上下文“ 设置为自己的双亲上下文；

验证👆： Spring MVC的实现。