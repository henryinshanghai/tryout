以上，对 Spring MVC框架的运行过程和实现，进行了简要的分析。

关键步骤如下：
#1 在Web环境/web服务器（Tomcat）中，建立 Spring IoC容器；
    作用：对web应用中的Bean 进行管理；
    学习要点：分析 Spring IoC容器 ”在Web容器中的配置“ 与 ”初始化完成过程“。
    特征：
        #1 从整个体系上看，这些 web应用 可以看成为 一个 Spring应用，与一般的Spring应用没有什么差异：
            都需要配置 {#1 IoC容器 以及 #2 各种Bean定义}。
        #2 因为 Web容器的特殊性，所以在配置方面：
            需要 “使用Spring作为开发平台的Web应用” 做一些 “与Web环境相对应的特殊处理”：
                比如 对Servlet 与 ServletContext的使用。

#2 对“把Spring作为开发平台的Web应用”来说，
作用：Spring为这些个 Web应用，提供了 Spring MVC框架，用于 替换 Struts这样的Web框架。
特征：
    #1 作为应用平台， Spring不会强制 Web应用 对于Web框架的选择。
    #2 但开发者如果在开发 web应用时，直接使用 Spring MVC作为web框架，则：会给开发工作带来很多便利；
    原因：
        #1 Spring MVC很好地提供了 与Web环境中的IoC容器的集成。
        #2 开发者 只需要专注于 业务逻辑 & 视图呈现的开发；

对于“视图呈现”的feature， Spring MVC集成了很多 现有的Web UI实现。
特征：Spring一般都能够 比较轻松地集成各个领域的其他解决方案。因此对于开发者来说，这是一件成本很低的事情

-- Spring MVC的实现原理 --
🐖 整个Spring MVC的运作时 以 DispatcherServlet为中心进行控制的。
过程如下：
#1 建立 Controller控制器 与 HTTP请求之间的映射关系；
    作用：为 当前HTTP请求，找到 其所对应的正确的controller控制器。
    手段：由 在handlerMapping中封装的 HandlerExecutionChain对象 来具体完成；

    - 配置 Controller控制器 与 HTTP请求之间的映射关系 -
    手段：
        #1 在Bean定义中进行描述；
        #2 在初始化 IoC容器时，通过初始化 HandlerMapping 来 完成。
    作用：这些定义好的映射关系 会被载入到 一个handlerMap中使用；
这个映射关系建立完成后， Spring MVC就已经可以接受 HTTP请求了。

#2 根据 HTTP请求的URL信息，在 HandlerMapping中查询得到对应的 HandlerExecutionChain对象。
    特征：这个 Chain对象中 封装了 配置的Controller；
    作用：这个Controller会 {#1 响应请求； #2 生成 ModelAndView对象；}

#3 把#2中得到的ModelAndView对象，转交给 特定的视图对象。最终在UI页面上呈现出这些数据。
    手段：由视图对象的render()方法完成.
