--- Spring MVC ---
虽然 SSH的技术组合中，使用 Struts来作为 Web层的技术框架，
但是 Spring自带的 MVC框架，同样也为开发者 提供了 Web层的支持，是一个不错的选择。

Spring中的MVC模式：
#Model；
    #1 封装应用中的数据状态；
    #2 对 数据状态的查询请求 进行响应；
    #3 提供 应用的功能接口；
    #4 当数据状态变化时，通知给 视图；
# 视图；
    #1 使用视图 来 展示应用中的数据；
    #2 向 应用中的数据 发起变更的请求；
    #3 向 控制器 提交用户的动作；
    #4 运行控制器 来 选择不同的视图；
# 控制器；
    #1 定义 应用的功能；
    #2 把 用户的请求 映射到 数据更新；
    #3 选择对应的视图；
    #4 一个控制器 对应 一组功能。

提升一个视角来看， MVC模式 在UI设计中非常普遍。
GoF设计模式著作中，最开始提到的就是它。
作用：把 模型、视图、控制器 这三个不同角色的组件独立开来，使得它们 能够独立扩展（而不会依赖）；
手段：把 业务处理 从 UI设计中 独立出来，封装进 模型与控制器中去。

--- Spring MVC用法概览 ---
开发者在使用 Spring MVC时，需要：
#1 在 web.xml中配置 DispatcherServlet；
    🐖 这个Servlet是 前端控制器的具体实现；
#2 在”Bean定义“中， 配置 Web请求 与 Controller（控制器）之间的对应（映射）关系；
#3 在”Bean定义“中， 配置 视图的展现方式。

--- 目标 & 手段 ---
帮助读者了解 Spring作为应用平台，是怎样 在Web应用中起作用的？
手段：分析 Spring MVC的设计；
分析步骤：
    #1 分析 Spring的IoC容器是怎样在 Web应用环境中发挥作用的？
        🐖 对于其他的Web框架（比如 Structs），开发者一定要思考 在Web环境中，要怎样把它与Spring IoC容器做集成？
    #2 分析 Spring MVC框架的实现原理；

-- Spring MVC在 Web容器中的相关配置 --
参考： web_clip_about_SpringMVC.xml

说明👇：
DispatcherServlet 与 ContextLoaderListener 一同提供了 “在Web容器中，对Spring的接口”？
也就是说，这些接口 与Web环境耦合的方式，是通过 ServletContext 来实现的。
    🐖 ServletContext 是 为了 Spring IoC容器 所提供的一个宿主环境；
在这个宿主环境中， Spring MVC会建立起一个 IoC容器的体系？
    🐖 这个 IoC容器的体系是 通过ContextLoaderListener 的初始化 来建立的；
建立完成 IoC容器的体系之后，紧接着 创建 DispatcherServlet实例 - 它就能够作为 Spring MVC处理Web请求的转发器 来 响应HTTP请求了。

结果：在完成上述配置之后，Spring MVC（建立在IoC容器之上）就能够处理响应了。
