--- org.springframework.web.servlet.handler.SimpleUrlHandlerMapping ---

// 特征：定义了一个map 来 持有一系列的映射关系
// 应用：遵照这里预定义的 URL请求与控制器的对应关系，Spring MVC应用就能够 根据HTTP请求，来找到 其所对应的Controller。
private final Map<String, Object> urlMap = new LinkedHashMap<>();

原理：这些映射关系是 使用接口类 HandlerMapping来封装的。
    HandlerMapping接口中，存在一个getHandler()方法。
    作用：获得与HTTP请求相对应的 HandlerExecutionChain - 在这个Chain中，就封装了具体的Controller对象。
    特征：调用getHandler()方法返回的是一个 HandlerExecutionChain
        这是典型的Command模式 - Chain中不但持有handler本身，还包括了处理这个HTTP请求的拦截器

- HandlerExecutionChain org.springframework.web.servlet.HandlerMapping.getHandler -
作用：返回 Handler执行链条，由handler对象 以及 任意的handler拦截器组成。
特征：由 HandlerMapping的 HandlerMapping.getHandler()方法 返回。

- HandlerExecutionChain -
private final Object handler;
    作用：作为 HTTP请求所对应的Controller
    用法：需要对handler做配置后，才能发挥作用 - 配置是在 “HandlerExecutionChain的初始化函数” 中完成的

private final List<HandlerInterceptor> interceptorList = new ArrayList<>(); // interceptor链条
    作用：链条中的拦截器对象 能够 为handler对象提供 功能的增强(advanced)；
    用法：需要对拦截器配置后，才能发挥作用 - 配置是在 “HandlerExecutionChain的初始化函数” 中完成的

// 初始化方法 👇
// 特征：相比较于先前的版本，现在初始化方法提供了更多的重载
public HandlerExecutionChain(Object handler, List<HandlerInterceptor> interceptorList) {
    if (handler instanceof HandlerExecutionChain) {
        HandlerExecutionChain originalChain = (HandlerExecutionChain) handler;
        this.handler = originalChain.getHandler();
        this.interceptorList.addAll(originalChain.interceptorList);
    }
    else {
        this.handler = handler;
    }
    this.interceptorList.addAll(interceptorList);
}

/* 其他用于维护handler 与 拦截器链条 的方法 */
# 为拦截器链条添加拦截器的方法 addInterceptor()方法

用法特征： HandlerExecutionChain 中所定义的Handler 与 Interceptor 都需要 在“定义HandlerMapping”时配置好。
对于 SimpleUrlHandlerMapping 来说，就需要：
    根据URL映射的方式， 来 注册 “Handler” 与 “Interceptor” - 这样就能够维护一个handlerMap，来记录（url -> controller）映射关系
原理：当接收到一个 HTTP请求的时候，Spring MVC 会从“上面的handlerMap中” 查询得到 对应的 HandlerExecutionChain。
#问：handlerMap中的信息是什么时候配置好/添加好的呢？
答：有一个注册过程 用来完成 配置信息的工作，这个过程发生在 “容器对Bean进行依赖注入”时。
具体工作是使用 一个Bean的postProcessor完成的。具体方法调用链略

- 对容器的回调 -
前提：只有 SimpleHandlerMapping 是 ApplicationContextAware的子类，才能够 启动这个注册过程。
特征：在这个过程中，初始化了 handlerMap - 用于 记录 URL到Controller之间的映射关系。

SimpleUrlHandlerMapping 的类继承关系 & initApplicationContext()方法的继承关系：
Ctrl + H & Ctrl + Alt + H
