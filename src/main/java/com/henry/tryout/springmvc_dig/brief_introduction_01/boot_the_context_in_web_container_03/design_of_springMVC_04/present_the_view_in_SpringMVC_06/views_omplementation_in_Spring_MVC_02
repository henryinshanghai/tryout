View -> AbstractView -> AbstractUrlBasedView

--- View ---
高层次作用：web接口中 MVC模式里的View。
作用#02：这个接口设计用来 避免限制 所有可能的实现的范围。
特征：
    #1 其实现类需要：渲染内容 & 暴露模型。
    #2 单个view对象 可以暴露 多个model属性。
    #3 这个类 以及 与其关联的其他MVC方式 都在 xxx 被讨论过。
    #4 View的实现类可能会有很大的不同。
        一个显然要有的实现会是  基于JSP的实现。
        其他的实现可能是  基于XSLT，或者使用一个 HTML的生成库。
    #5 Views应该是 bean。它们很有可能 被ViewResolver当作一个Bean来初始化。
    #6 由于这个接口 是无状态的，因此 view的实现类应该是 线程安全的。

--- AbstractView ---
是：View的实现类 所准备的抽象基类。
特征：
    #1 子类应该是一个 JavaBean - 这样它就能作为 Spring管理的bean实例 来 被开发者方便地进行配置。
    #2 提供了对 静态属性的支持 - 以供view使用，并使用各种方式来指定它们。
    ## 对于每一个render操作，静态属性 会与给定的动态属性合并(也就是 controller所返回的model)。
    #4 扩展自 WebApplicationObjectSupport - 对于某些view来说，这会很有帮助。
    #5 子类中只需要实现 真正的 rendering。

--- AbstractUrlBasedView ---
是：基于URL的views 准备的抽象基类。
作用：以 url bean属性的方式，来提供一个一致的方式 来 持有View所包装的URL。

综上，从这个继承体系可以看出， Spring MVC对常见的视图都提供了支持。
比如 {#1 JSP/JSTL视图、 #2 FreeMaker视图、 #3 Velocity视图、#4 Excel 与 #5 PDF视图}
手段：通过与第三方框架做集成；
应用：用于开发 web应用的UI部分。

从源代码实现的角度来说：
#1 View接口下，实现了一系列的具体View对象；
#2 这一堆的View对象，根据各自特性的不同，被归类在 不同的抽象类中：
    比如 AbstractView抽象类 就存在有很多个 具体的实现类 - AbstractExcelView、AbstractUrlBaseView等
    好处：对不同的视图实现类 进行归类，方便应用的后期扩展。

Next：分析几种常见的View实现




