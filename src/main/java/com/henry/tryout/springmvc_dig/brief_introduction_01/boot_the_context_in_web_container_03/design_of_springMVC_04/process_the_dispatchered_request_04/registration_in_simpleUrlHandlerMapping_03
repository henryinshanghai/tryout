--- SimpleUrlHandlerMapping 中的 urlMap的注册过程 ---
除了调用 父类的初始化方法，还 调用registerHandlers()方法
public void initApplicationContext() throws BeansException {
    super.initApplicationContext();
    registerHandlers(this.urlMap);
}


// 为对应的paths 来注册 在urlMap中指定的所有handler
registerHandlers(){
    ...

    else { // 这里对 Bean的配置进行解析，然后调用基类的 registerHandler 来完成注册
        urlMap.forEach((url, handler) -> {
            ...
            registerHandler(url, handler);
        }
    }
}
特征：这个注册过程，很大一部分需要基类（AbstractUrlHandlerMapping）来配合；

-- 基类中对 “注册过程” 的支持 --
特征：
    如果使用 Bean的名称作为映射，则 AbstractUrlHandlerMapping会：
        #1 直接从容器中获取 当前HTTP映射所对应的Bean；
        #2 对不同的URL配置进行解析 - 不同的URL {/， /* ，正常的URL请求}
        #3 把URL 与 handler 作为键与值， 存放到一个 handlerMap中去

- AbstractUrlHandlerMapping.registerHandler(java.lang.String, java.lang.Object) -
代码：
(注释) 如果是通过名称来引用的话，则：赶紧地（eagerly）解析handler
（书本）如果是 直接用Bean名称 进行映射的话，则：直接从容器中获取 handler
if (!this.lazyInitHandlers && handler instanceof String) {
    String handlerName = (String) handler;
    ApplicationContext applicationContext = obtainApplicationContext();
    if (applicationContext.isSingleton(handlerName)) {
        resolvedHandler = applicationContext.getBean(handlerName);
    }
}

else { // 处理 URL是"/"的映射 - 把这个对/的请求 & 处理此请求的controller，设置到 rootHandler上
    if (urlPath.equals("/")) {
        ...
        setRootHandler(resolvedHandler)
    }

    else if (urlPath.equals("/*")) { // 处理 URL是"/*"的映射 - 把 对/*的请求 & 处理此请求的controller， 设置到 defaultHandler上
        ...
        setDefaultHandler(resolvedHandler)
    }

    else { // 处理正常的URL映射 - 设置handlerMap的 key&value（分别对应于 URL与 其映射的controller）
        this.handlerMap.put(urlPath, resolvedHandler);
    }
}

🐖 代码中的 handlerMap 是一个 HashMap类型，其中保存了 URL请求 与 其对应的Controller的映射关系。
特征：定义在 AbstractUrlHandlerMapping中。

以上，最核心的成员变量就是 handlerMap。
上述的注册过程 在handlerMap中配置好了/添加好了 URL请求 & handler映射数据?;
应用：（有了基础的映射关系）Spring MVC就能够根据 handlerMap中配置的映射数据，
    来 处理URL请求了（按照表格，根据请求，得到它所对应的handler）
