--- org.springframework.web.servlet.HandlerMapping.getHandler() ---
作用：为当前请求 返回 一个handler 与 任意数量的拦截器。
特征：
    #1 可以根据 请求URL、会话状态 或者 实现类所选择的其他因素 来 做出选择?
    #2 返回的 HandlerExecutionChain 包含有一个 handler对象（而不是某种 tag形式的接口）- 这样 handlers就不会受到任何地约束。
        什么叫做 “不受约束”？
            例如说，一个 HandlerAdapter 就可以被重写 来 允许其他框架的handler对象被使用。
    #3 如果没有任何匹配结果，则：返回null - 这不是一个error。
        为什么返回null 不是一个error？
        因为 DispatcherServlet 会查询 “所有注册的HandlerMapping Beans” 来 试图找到一个匹配结果，
        并且只会在找不到handler的情况下，才会决定 “有一个error”。
参数：
    request - 当前的HTTP请求
返回值：
    一个 HandlerExecutionChain实例，其中包含 handler对象 与 任意数量的拦截器，或者 null(如果没有找到任何mapping)

书本：
    getHandler()方法 是 实际使用HandlerMapping 来 完成请求的映射处理 的地方。

fact：执行 HandlerExecutionChain时，会首先 在AbstractHandlerMapping中，调用getHandler()方法。
-- org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler --
作用：为指定的request 找到一个handler；
特征：如果没有找到专门的handler，则 会使用默认的handler；

关键代码解释：
public final HandlerExecutionChain getHandler(HttpServletRequest request) {

    // 使用 默认的handler，也就是 /所对应的handler
    if (handler == null) {
        handler = getDefaultHandler();
    }
    ...
    // 通过名称 来 取出对应的handler Bean
    if (handler instanceof String) {
        String handlerName = (String) handler;
        handler = obtainApplicationContext().getBean(handlerName);
    }
    ...
    // 把 handler封装到 HandlerExecutionChain中，并添加上拦截器
    HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);
    ...
}

-- org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandlerExecutionChain() --
注释：
作用：为指定的handler 来 创建一个 HandlerExecutionChain（其中包含适合的拦截器）。
特征：
    #1 默认的实现会使用 给定的handler 来 构建 {#1 一个标准的HandlerExecutionChain,
        #2 handlerMapping的常用拦截器, #3 以及能够匹配当前 request URL的任意 MappedInterceptors}
    #2 拦截器会以它们被注册的顺序进行添加。
    #3 子类可以 覆写它 来 扩展/重新安排 拦截器的列表。

protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) {
    HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ?
            (HandlerExecutionChain) handler : new HandlerExecutionChain(handler));

    ...

    return chain;
}


-- 获取handler - org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandlerInternal() --
注释：
作用：为给定的request 来 查找一个handler；
特征：
    #1 如果没有找到对应的handler则返回 null
    #2 这个方法 被 getHandler()方法调用；
    #3 一个 null的返回结果 会导致默认的handler（如果设置了默认的handler的话）

实现过程：
#1 从HTTP请求中获取到URL；
#2 根据URL到 urlMapping中获取到 handler；

代码实现：
    // 从request中 解析到请求的URL路径?
    String lookupPath = initLookupPath(request);
    Object handler;
    if (usesPathPatterns()) {
        // 从request中 解析到请求的URL路径?
        RequestPath path = ServletRequestPathUtils.getParsedRequestPath(request);
        // 把 得到的URL路径 与 Handler进行匹配，进而得到对应的Handler
        // 特征：如果没有找到对应的Handler，则：返回null - 这样默认的Handler就会被使用
        handler = lookupHandler(path, lookupPath, request);
    }
    // 这里的实现 跟书上说得不一样，handler的初始化有两种方式 - why?
    else {
        handler = lookupHandler(lookupPath, request);
    }

    if (handler == null) {
        // 这里对默认handler进行处理
        // 注释：我们需要直接处理 默认的handler，因为我们也需要 为它来暴露 PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE
        Object rawHandler = null;
    }

- AbstractUrlHandlerMapping.lookupHandler(java.lang.String, javax.servlet.http.HttpServletRequest) -
作用：为给定的URL path，查找到一个 其所对应的handler实现。
特征：当 String模式 与 正在使用的PathMatcher匹配的时候，就会使用这个方法。
书本：lookupHandler 根据URL路径， 在handlerMap中启动对handler的检索，并最终返回handler对象

// No handler found...
return null;

--- conclusion ---
#1 经过这一系列对HTTP请求进行解析 & 匹配handler的过程，Spring MVC最终得到了与请求相对应的handler处理器。
#2 在返回的handler中，已经完成了 在HandlerExecutionChain中的封装工作 - 为handler 对HTTP请求进行响应 做好了准备；

遗留问题：
请求是怎样被分发的，并最终到达了对应的handler呢？
🐖 这是 HTTP请求在MVC框架中处理过程的最后一块拼图
