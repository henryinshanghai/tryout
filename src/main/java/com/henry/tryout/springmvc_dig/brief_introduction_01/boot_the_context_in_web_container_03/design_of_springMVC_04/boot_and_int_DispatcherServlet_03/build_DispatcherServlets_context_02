--- DispatcherServlet的上下文是怎么创建出来的 创建出来 VS. 初始化（初始化未必需要创建的动作） ---
fact：这个过程与 根上下文的建立过程十分类似

- org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(org.springframework.context.ApplicationContext) -
注释：
    作用：为当前Servlet 来 实例化上下文对象；
    特征：
        #1 要么是默认的 XmlWebApplicationContext，要么是自定义的类（如果设置的话）。
        #2 这个实现会期待 自定义的上下文 来 实现 ConfigurableWebApplicationContext 接口。
        #3 在子类中可以重写这个方法；

    用法：
        #1 不要忘记在“所创建的上下文”中，注册“当前servlet实例” 作为“应用的监听器” - 用来触发它的callback；
        #2 以及 在返回上下文实例之前, 调用 ConfigurableApplicationContext.refresh() 方法

-- 创建servlet的上下文的过程 --
建立 DispatcherServlet的上下文，需要：
#1 把根上下文作为参数传递给它；- WebApplicationContext createWebApplicationContext(@Nullable ApplicationContext parent)
#2 然后使用反射技术 来 实例化上下文对象，并为之设置参数。
    按照默认的配置，这里的上下文对象 也是 XmlWebApplicationContext类型的；
        这个类型是在 DEFAULT_CONTEXT_CLASS参数中设置好，并允许 BeanUtils使用的。
#3 在实例化结束后，需要为这个上下文对象 设置好一些基础的配置 - {它的双亲上下文、Bean定义配置文件的位置等}
    wac.setParent(parent);
#4 最后，通过调用 IoC容器的refresh()方法来完成 IoC容器的最终初始化。

特征：与“IoC容器的初始化过程”基本是一样的。

-- 代码实现 --
org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(org.springframework.context.ApplicationContext)

#1 实例化需要的具体上下文对象
这里使用的是 DEFAULT_CONTEXT_CLASS, 它所被设置的上下文是 XmlWebApplicationContext.class
因此 在 DispatcherServlet中所使用的IoC容器是 XmlWebApplicationContext
ConfigurableWebApplicationContext wac =
				(ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);

#2 这里配置的双亲上下文 就是 在ContextLoader中所建立的根上下文
wac.setParent(parent);

#3 “设置ServletContext的引用” 和 其他相关的配置信息
configureAndRefreshWebApplicationContext()

至此， DispatcherServlet中的IoC容器就已经建立起来了 - 这个IoC容器是根上下文的子容器。

-- 梳理Bean定义的查找过程 --
action： 查找一个由 DispatcherServlet所持有的上下文 管理的Bean；
执行路径：
    #1 系统首先会到根上下文中查找；
    #2 如果查找不到，才会到 DispatcherServlet所管理的IoC容器中进行查找；
原因：IoC容器 getBean()方法 就是这么实现的;

--- getBean()方法的实现：参考第三章 ---

综上，通过一系列 在Web容器中执行的动作，会 建立并初始化完成 整个上下文体系。
在此基础上，Spring MVC就能够发挥其作用了


