概念 & 组件：
#1 Spring IoC容器/上下文 - WebApplicationContext；
#2 IoC容器的加载器 - ContextLoaderListener
#3 Web容器的前端控制器 - DispatcherServlet

流程：
#1 初始化 ContextLoaderListener；
#2 初始化 DispatcherServlet；

fact：
#1 DispatcherServlet 会建立自己的上下文 来 持有Spring MVC的Bean对象。
#2 在建立自己的持有的上下文时， DS会从 ServletContext中 “获取到根上下文” 来 作为 DispatcherServlet所持有上下文的双亲上次下文。
#3 获取到#2中的上下文后，接着在对自己的上下文进行初始化；
#4 最后把自己持有的上下文保存到 ServletContext中， 供之后检索和使用。

--- 用代码了解 DispatcherServlet启动的整个过程 ---
-- 父类 FrameworkServlet --
fact: ApplicationContext的创建过程 与 ContextLoader创建根上下文的过程 十分类似；

-- DispatcherServlet类的继承关系 --
DispatcherServlet 继承 HttpServlet的路径：
    DispatcherServlet -> FrameworkServlet -> HttpServletBean -> HttpServlet


- HttpServlet -
提供一个抽象类，用来给子类继承。
从而使开发者能够 来 创建一个适用于Web站点的 HTTP servlet。
HttpServlet的子类 必须要覆盖至少一个方法, 通常是以下方法之一：


-- Spring MVC的实现：从DispatcherServlet 开始 --
作用：
    #1 作为 Spring MVC的前端处理器；
    #2 作为 MVC模块 与 Web容器集成的处理前端。
原理：通过使用 Servlet API 来对HTTP请求进行响应。
工作分类：
    #1 初始化部分；
        // HttpServletBean方法的覆写，一旦任何bean属性被设置后，当前方法就会被调用。
        来 创建这个servlet的 WebApplicationContext.
        org.springframework.web.servlet.FrameworkServlet.initServletBean()

        方法依赖的路径（method chain）:
            this.webApplicationContext = initWebApplicationContext();
                onRefresh(wac);
                    initStrategies(context);

        -- initStrategies() --
        初始化 当前servlet所使用的 策略对象集合。
        特征：有可能会在子类中被重写 来 初始化更多的策略对象。
        书本：在这个方法中， DispatcherServlet 对 MVC模块的其他部分进行了初始化：
            initHandlerMappings(context);
            initViewResolvers(context);

    #2 对HTTP请求进行响应 - 这是作为servlet的工作；
        原理：Web容器会调用 Servlet的 doGet()与 doPost()方法；
        特征：
            #1 FrameworkServlet的 processRequest()方法 会对请求进行简单处理；
                处理这个请求，不管结果如何，都会发布一个事件。
                事件会被抽象模板方法 doService() 来 处理。

                - org.springframework.web.servlet.FrameworkServlet.processRequest() -
            #2 DispatcherServlet中的doService() 会对请求做进一步处理；
                暴露 DispatcherServlet所专有的请求属性集合，并 把请求委派给 doDispatch() 来 真正地做委派（dispatch）
                - org.springframework.web.servlet.DispatcherServlet.doService() -

                doService -> doDispatch()方法

                处理委派到handler上的请求
                通过按照顺序 来 应用servlet的 HandlerMappings 就能够获取到（obtain） handler；
                通过查询 servlet所安装的 HandlerAdapters 来 找到第一个支持 当前handler类的 adapter，就能够获取到 HandlerAdapter。
                书本：doDispatch()方法 是 Dispatcher实现MVC模式的主要部分 👇
                - org.springframework.web.servlet.DispatcherServlet.doDispatch() -

