--- Web容器中的上下文 ---
agenda：
#1 Web容器中的上下文设置；
#2 从 ContextLoaderListener中，了解 整个容器的启动过程；

-- 在Web环境中，使用IoC容器 --
Spring所提供的组件支持：WebApplicationContext（Web应用上下文）；
作用：用于 在Web环境中启动IoC容器；
特征：
    #1 是 对上下文（Context）的一个扩展；
    #2 专用于 Web应用；

作用#1：用于为web应用提供 配置的接口。
特征：
    #1 当web应用运行的时候，它是只读的（但如果其实现类支持的话，则：可以被重新加载）
    #2 这个接口相比于 通用的 ApplicationContext接口：
        #1 添加了一个 getServletContext()方法，
        #2 并且定义了一个 著名的 应用属性名 - 在启动/引导（bootstrap）过程中，根上下文必须要绑定到这个属性上。
    #3 与通用的应用上下文一样， web应用上下文也是 有层次的。
        #1 每个application，都会有一个单一的 根上下文，而
        #2 应用中的每一个 servlet（包括 MVC框架中的 dispatcher servlet）也会有它们自己的子上下文。

作用#2：除了标准的 应用上下文的生命周期功能外， webApplicationContext的实现类还需要
检测 ServletContextAware bean，并相应地调用 setServletContext()方法。


-- WebApplicationContext 的类层次结构 --
顶层组件 ApplicationContext接口 - 作用：用于表示IoC容器这个抽象组件;
子组件*1 WebApplicationContext接口【添加表示应用场景的定语-用于Web】;
子组件的扩展组件*1 ConfigurableWebApplicationContext 接口【添加表示特征的抽象定语-Configurable】；
子组件的扩展组件的实现类 AbstractRefreshableWebApplicationContext【添加表示特征的更具体定语-Refreshable】
子组件的扩展组件的实现类的扩展类 XmlWebApplicationContext【添加表示具体实现方式的定语-Xml】
    特征：这个组件离开发者最近 aka 开发者有可能在编写代码的过程中使用到它

--- 从 XmlWebApplicationContext 实现类 来 入手了解 更大的类层次结构 ---
先抛结论：
    #1 从接口设计的角度，类层次体系 最终通过 ApplicationContext接口 来 与 BeanFactory接口 进行对接；
    #2 从具体实现类的角度，很多基础功能的实现 都是封装在 AbstractRefreshableWebApplicationContext中的；

验证 👇
-- WebApplicationContext组件 --
    #1 ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE - 用于引用根上下文（存储在 ServletContext中）
    #2 getServletContext() - 得到当前Web容器中的 Servlet上下文环境。
        🐖 这个方法相当于 提供了一个 Web容器级别的 “全局环境”。

结论：在启动IoC的过程中， Spring会默认使用 XMLWebApplicationContext(WebApplicationContext的实现) 来 作为IoC容器；

-- XmlWebApplicationContext 组件 --
继承路径：
#1 ApplicationContext - 用于表示 IoC容器概念的具体实体
#2 ConfigurableApplicationContext；
    是：一个 SPI接口 - 大多数的application contexts都会实现它；
    作用（注释）：用于提供 设施来 #1 配置一个application context，#2 以及 在 ApplicationContext接口中的 客户端方法；
#3 AbstractRefreshableApplicationContext;
    是： ApplicationContext实现类的一个Base类。
    作用（注释）：用于提供对于 refresh()方法的多个调用，并在每一次都创建一个新的内部的bean工厂实例。
    特征：一般来说（不是必须的），这样一个上下文会被 一堆的config locations驱使 来 从中加载具体的bean定义。
#4 WebApplicationContext;
    是：一个接口；
    作用：用于 为web应用来提供配置。
    特征：
        #1 当应用在运行中时，它是 read-only的。但如果实现类支持它的话，则：有可能被重新加载；
        #2 相对于 通用的 ApplicationContext接口，它：
            #1 添加了一个 getServletContext()方法；
            #2 并且定义了一个 广为人知的应用属性名 - 在启动（bootstrap）过程中，根上下文（root context）必须要绑定到这个属性上。
#5 XmlWebApplicationContext;
    它是 WebApplicationContext的一个实现类；
    特征：#1 从 XML文档中获取它所需要的配置项； #2 它本身被 XmlBeanDefinitionReader所理解；
    它基本上是 GenericXmlApplicationContext 对于 Web应用的一个等价物。

结论： XmlWebApplicationContext是从 ApplicationContext继承下来的。
在基本的 ApplicationContext功能的基础上，增加了对 Web环境 与 XML配置定义的处理。

在 XmlWebApplicationContext的初始化过程中， Web容器中的IoC容器被建立了起来（然后才能在 Web容器中建立起整个 Spring应用）。

--- XmlWebApplicationContext中IoC容器的具体启动过程 ---
特征：
    #1 （共性）和 IoC容器的初始化过程一样，这里也有 loadBeanDefinition 对 BeanDefinition的载入；
    #2 （特性）在Web环境中，对定位 BeanDefinition的Resource有特别的要求。
        具体实现：对 getDefaultConfigLocations()方法处理时（？），
            使用了 默认的BeanDefinition 来 配置路径 （这个路径在 XmlWebApplicationContext中作为一个常量定义好了）
源码示例：XmlWebApplicationContext
