使用 Spring的开发者 很多对 Web开发技术都比较熟悉 - 比如SSH技术架构（Struts + Spring + Hibernate）
它们是 Web应用开发中最常见的技术组合。
分工：
    #1 使用 Struts 作为 Web框架 来 构建应用的UI；
    #2 使用 Spring 作为 应用平台；
    #3 使用 Hibernate 作为 数据持久化的实现。
这个技术组合全部由开源软件组成，其中：
    #1 Struts 是Apache旗下的一个项目；
    #2 Hibernate 已经成为 JBoss/RedHat产品组合中的一员；
    #3 Spring 则是一个开源应用平台；

在这个技术组合中， Hibernate 是一个独立的持久化产品， Spring本身并不会提供 自己的 ORM数据持久化方案。
相反地，Spring提供了 JDBC的封装（用来 实现数据持久化）。
不过相比于 Hibernate，功能太过单薄。

虽然在 ORM数据持久层， Spring没有提供自己的解决方案。
但是在 Web UI层面， Spring提供了自己的解决方案，也就是 Spring MVC；

但为什么 Spring会发展成现在的模样呢（提供了 Web层的方案，却没有提供持久层的方案）？
答： Spring尝试了，但是市场给出了自己的选择。😄

总结：在这个技术组合中， Spring的作用是 应用平台。
应用平台是干嘛用的？
答：有点子像应用的操作系统 - 统一管理 应用所需要使用到的资源。
手段：Spring提供了一堆的平台特性 {IoC容器、AOP、事务处理、持久化驱动等}
说明：这里说的平台，意思等同于基础设施。

提升一个视角来看，在软件产品开发中，如果 某一个特性的使用非常普遍，则：
这个特性可能就会 被作为平台的特性 来实现。
好处：平台会对开发者暴露/开放这个特性，开发者因此也就不需要去自己实现这个特性 - 从而提高了开发效率。
类比：现代社会中，有了 电力、网络、铁路、航空等这些基础设施后，整个社会的运行效率 比起 机器工业社会的效率，不可同日而语。

--- 特性的发展 ---
从 应用特性 -> 平台特性；
就像电的使用一开始是 只有贵族才能享用到的便利。而今 旧时王谢堂前燕，飞入寻常百姓家，
随着社会与经济的发展，电力 开始进入到 普通百姓的正常生活中。

这种特性的演变/发展是 以一种基础设施 和 成熟产品的方式 来 完成的，
因为只有这样才能具备 规模效应，来 分担基础设施建设的前期建设成本。

基于这样一种对比，可以发现，对于 基础软件的开发与应用，
如果采用 开源软件的开发方式 来完成，
则：可以看到开源的开发方式 发挥着非常奇妙的作用。
一方面，通过开源，能够广泛地 手机基础需求；
另一方面，开源又能有效地 分摊 前期的开发、测试以及一些应用培育的成本。
案例：Linux / Spring;

--- 优秀的平台 ---
优秀的平台 对于 提高应用的开发效率 是大有帮助的。
开发者 在使用平台开发软件时，由于平台已经提供了 很多现成的特性实现，
因此 开发者的应用就不再需要 重新构思、设计与实现，而只需要 关注应用需求本身。

--- Spring MVC ---
虽然 SSH的技术组合中，使用 Struts来作为 Web层的技术框架，
但是 Spring自带的 MVC框架，同样也为开发者 提供了 Web层的支持，是一个不错的选择。

Spring中的MVC模式：
#Model；
    #1 封装应用中的数据状态；
    #2 对 数据状态的查询请求 进行响应；
    #3 提供 应用的功能接口；
    #4 当数据状态变化时，通知给 视图；
# 视图；
    #1 使用视图 来 展示应用中的数据；
    #2 向 应用中的数据 发起变更的请求；
    #3 向 控制器 提交用户的动作；
    #4 运行控制器 来 选择不同的视图；
# 控制器；
    #1 定义 应用的功能；
    #2 把 用户的请求 映射到 数据更新；
    #3 选择对应的视图；
    #4 一个控制器 对应 一组功能。

提升一个视角来看， MVC模式 在UI设计中非常普遍。
GoF设计模式著作中，最开始提到的就是它。
作用：把 模型、视图、控制器 这三个不同角色的组件独立开来，使得它们 能够独立扩展（而不会依赖）；
手段：把 业务处理 从 UI设计中 独立出来，封装进 模型与控制器中去。

--- Spring MVC用法概览 ---
开发者在使用 Spring MVC时，需要：
#1 在 web.xml中配置 DispatcherServlet；
    🐖 这个Servlet是 前端控制器的具体实现；
#2 在Bean定义中， 配置 Web请求 与 Controller（控制器）之间的对应（映射）关系；
#3 在Bean定义中， 配置 视图的展现方式。

--- 目标 & 手段 ---
帮助读者了解 Spring作为应用平台，是怎样 在Web应用中起作用的？
手段：分析 Spring MVC的设计；
分析步骤：
    #1 分析 Spring的IoC容器是怎样在 Web应用环境中发挥作用的？
        🐖 对于其他的Web框架（比如 Structs），开发者一定要思考 在Web环境中，要怎样把它与Spring IoC容器做集成？
    #2 分析 Spring MVC框架的实现原理；

-- Spring MVC在 Web容器中的相关配置 --
参考： web_clip.xml

说明👇：
DispatcherServlet 与 ContextLoaderListener 一同提供了 “在Web容器中，对Spring的接口”？
也就是说，这些接口 与Web环境耦合的方式，是通过 ServletContext 来实现的。
    🐖 ServletContext 是 为了 Spring IoC容器 所提供的一个宿主环境；
在这个宿主环境中， Spring MVC会建立起一个 IoC容器的体系？
    🐖 这个 IoC容器的体系是 通过ContextLoaderListener 的初始化 来建立的；
建立完成 IoC容器的体系之后，紧接着 创建 DispatcherServlet实例 - 它就能够作为 Spring MVC处理Web请求的转发器 来 响应HTTP请求了。

结果：在完成上述配置之后，Spring MVC（建立在IoC容器之上）就能够处理响应了。
