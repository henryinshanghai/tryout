--- DispatcherServlet的启动 ---
fact： 作为一个Servlet， DispatcherServlet的启动 与 Servlet的启动过程是相关联的。

-- Servlet的初始化 --
手段：调用 Servlet的init()方法；

-- DispatcherServlet的基类 HttpServletBean类的初始化方法 --
- org.springframework.web.servlet.HttpServletBean.init() -
作用：把所配置的参数 映射到 当前servlet的bean属性上去，并 调用子类的初始化方法；
步骤：
    #1 在初始化开始时，需要读取 配置在ServletContext中的Bean属性参数；
        特征：
            #1 这些个参数配置在 web.xml文件 关于 Web容器初始化参数的部分。
            #2 开发者可以使用编写代码的方式 来 获取到配置在web.xml文件中的相关属性；
                PropertyValues pvs = ...  BeanWrapper bw = ...
                🐖 在分析IoC容器的初始化 / 对依赖注入的实现进行分析时，其实就涉及到了这些个 “与依赖注入相关的类”
            #3 此处的依赖注入 与 Web容器的初始化相关，因此 初始化过程 由 HttpServletBean来完成。
    #2 进行 DispatcherServlet所持有的IoC容器的初始化；
        作用：由此建立了一个全新的上下文 B - 这个上下文B 会被设置为 根上下文A的子上下文。
            根上下文：属于 Web应用；
            DispatcherServlet所持有的上下文： 属于 Servlet；
            fact：
                #1 在一个Web应用中， 一般可以容纳多个 Servlet的存在；
                #2 在Web容器中，一个"根上下文" 能够作为 很多个 "servlet上下文"的 “双亲上下文”；

            -- 扩展： 在Web环境的IoC容器中，设置与检索 Bean --
            fact：开发者向 IoC容器去 getBean时，IoC容器会首先 向它的“双亲上下文”来 获取Bean。
            综上， 在根上下文中所定义的Bean 能够 被所有的Servlet上下文 共享/获取。
    #3 DispatcherServlet所持有的上下文建立完成后，进行容器的初始化 - 建立完成是什么意思？
        手段：refresh()方法；
    #4 给自己所持有的上下文进行命名，并 把这个上下文 设置到 Web容器的上下文（ServletContext）中；
        🐖 #4中的名称 与 开发者在web.xml中为DispatcherServlet所设置的 “Servlet名称”有关。
        作用：用于 保证 DS所持有的上下文 在Web环境上下文系统中的唯一性。

代码分析：
#1 HttpServletBean init()
// 获取Servlet的初始化参数，用来设置 Bean的属性
PropertyValues pvs = ...

#2 HttpServletBean
// 允许子类做自己想要的初始化 - 调用子类的initServletBean()来进行具体的初始化
initServletBean();

#3 FrameworkServlet
-- org.springframework.web.servlet.FrameworkServlet.initServletBean() --
覆写 HttpServletBean的方法，在任何Bean属性被设置后就会被调用。
用于创建当前Servlet的 WebApplicationContext

#4 对上下文进行初始化
this.webApplicationContext = initWebApplicationContext();

#5 获取到根上下文
// 调用 WebApplicationContextUtils静态类 来 得到根上下文
// 这个根上下文是保存在 ServletContext中的
// 使用这个根上下文 作为 当前MVC上下文的 双亲上下文(parent context)
WebApplicationContext rootContext =
        WebApplicationContextUtils.getWebApplicationContext(getServletContext());

#6 获取到 当前Servlet的上下文 magically?
// 在构建时 一个上下文实例被注入 -> 使用它
wac = this.webApplicationContext;

#7 把 web应用的根上下文 设置为 servlet的上下文 的 parent
// 把当前建立的上下文存到 ServletContext中去
// 注意这里使用的属性名 是和当前Servlet名相关的
if (this.publishContext) {...}

至此，MVC的上下文就建立起来了。

-- 获取到根上下文的过程 --
WebApplicationContextUtils.getWebApplicationContext(getServletContext());

// 查找到当前web app的 根上下文，通常情况下 会通过 org.springframework.web.context.ContextLoaderListener 来加载
public static WebApplicationContext getWebApplicationContext(ServletContext sc) {
    // 🐖 这个属性所代表的 根上下文 在ContextLoaderListener初始化的过程中 被建立，并被设置到 ServletContext中
    return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
}

#1 这个根上下文 会通过 ContextLoader 来 设置到 ServletContext中去；
    设置时所使用的属性名是 ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE；
#2 ContextLoader 还会对 此IoC容器的Bean配置文件进行设置 - Bean配置文件默认的位置是 /WEB-INF/applicationContext.xml；
#3 因为#1中的根上下文是 DispatcherServlet所建立起的上下文的 “双亲上下文”，所以：
    根上下文所管理的Bean 也可以 被 DispatcherServlet的上下文 直接使用。

fact: 使用getBean 向IoC容器获取Bean时，容器会先到自己的 “双亲IoC容器”中getBean。
