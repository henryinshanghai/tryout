Spring MVC为Java Web异步规范所提供的接口：AsyncWebRequest & StandardServletAsyncWebRequest；
类中的两个方法：
    #1 startAsync() 用于把请求委托出去
    #2 dispatch() 用于把处理完成的请求收回来

== 区分哪些方法需要异步处理 ==
手段：根据方法的返回值 - 如果方法的返回值是某个预期的类型，则表明：此方法需要进行异步处理。

预期的类型：{Callable, DeferredResult, WebAsyncTask, StreamingResponseBody...}

用法：
#1 对于希望 Spring MVC框架处理的异步方法，开发者可以 返回Callable类型；
#2 对于希望 自己自行处理的异步方法，开发者可以 返回 DeferredResult类型 - 表示要延迟一会，才会有结果。

fact：Spring MVC处理的主流程 在把任务交出去之后，就已经结束了。
所以，委托的线程把任务处理完成后，要怎么能返回给Spring MVC呢？
答：执行结果会返回给Web容器，而后 Web容器会再次委派这个请求到 Spring MVC中。

== Recap ==
Spring MVC对异步处理的支持：
#1 委托请求到工作线程 - startAsync();
#2 工作线程处理请求结束后，取回处理结果 - dispatch();
#3 区分请求是否需要进行异步处理：根据方法的返回值类型 {Callable, DeferredResult, WebAsyncTask,}
