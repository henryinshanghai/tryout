认识：分工的产生 与 不同工种之间的协作，往往代表着一种更加先进与高效的生产方式。

=== Web容器对异步的支持 ===
prerequisite fact:
#1 Spring MVC其实是对 Java Web的封装；
#2 Java Web是一个规范，定义了一堆的接口；
#3 Web容器是 Java Web规范的具体实现，Tomcat就是一个具体的Web容器；
#4 开发者开发出的web应用，最终都是在Web容器中运行的。
#5 本地使用Spring Boot开发web应用运行后，通过发送请求来在控制台打印日志。会发现：
    对于每次请求，日志中所打印的线程名称是不一样的（这些线程就是 Web容器Tomcat中的线程）

Web容器处理HTTP请求的方式：
    #1 对于每一个请求，Web容器都会从自己的线程池中取出一个线程 来 “运行web应用” 以 处理HTTP请求。
    #2 请求处理完成后，线程会回到线程池中。
特征：如果HTTP请求很耗时，则 可能会使线程池中的线程来不及回到线程池中 - 这时其他的HTTP请求就无法被处理

对请求做分类： 执行很快的请求 & 执行非常耗时的请求；
思路：
    #1 对于“执行很快的请求”，由 Web容器线程池中的线程 来 处理；
    #2 对于“非常耗时的请求”，由 Web容器线程池中的线程 委托给 其他专门的线程池中的线程 去处理；
    #3 在 #2中请求被处理完成后，Web容器线程池中的线程 会获取到处理结果，并将结果写入响应中。
特征：
    #1 需要把“耗时的请求” 交出去；
    #2 “耗时的请求”处理完成后，需要把处理结果 交回来。
这就是 Java Web异步处理的整体思路 👆 执行流程交出去, 执行流程还回来。

== Recap ==
Spring MVC所提供的异步处理能力：
#1 把任务委托给工作线程； #2 快速释放Web容器线程。