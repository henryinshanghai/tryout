下面的描述使用了变量名$CATALINA_BASEl 来 引用基目录（大多数相对路径将根据该目录解析）。
如果您没有通过设置CATALINA_BASE目录为多个实例配置Tomcat，
那么$CATALINA_BASE将被设置为$CATALINA_HOME的值，也就是您安装Tomcat的目录。


本手册的一个重要建议是：
分离“包含源代码的目录层次结构”(在本节中描述)
从“包含可部署应用程序的目录层次结构”中(上一节中描述了)。
保持这种分离有以下好处:

#1 如果应用程序的“可执行”版本没有混入其中的话，则：源目录的内容可以更容易地管理、移动和备份；
#2 在只包含源文件的目录上，更容易进行源代码控制。
#3 当部署层次结构是独立的时，开发者会更容易选择 那些“组成应用程序的可安装发行版的文件”。


正如我们将看到的，ant开发工具使得“创建和处理这种目录层次结构”几乎不费苦心（nearly painless）。


===

用于“包含应用程序源代码的实际目录和文件层次结构”几乎可以是您喜欢的任何形式。
但是，下面的组织已经被证明是非常普遍适用的，下面讨论的示例build.xml配置文件也期望使用它。
所有这些组件都存在于应用程序的顶级项目源目录下:

#1 docs/ — 你的应用程序的文档，无论你的开发团队使用什么格式。
#2 src/ - 用于 生成#1 应用程序特有的servlet、#2 bean和 #3 其他Java类的Java源文件。
    如果源代码组织在包中(强烈推荐)，则包层次结构应该反映为（reflect）该目录下的目录结构。
#3 web/ - “用程序客户端”可以访问的网站的静态内容(HTML页面、JSP页面、JavaScript文件、CSS样式表文件和图像)。
    这个目录将是“web应用程序的文档根（document root）目录”，在这里找到的任何子目录结构，都将反映在“访问这些文件所需的请求uri”中。
#4 web/WEB-INF/ - 应用程序所需的“特殊配置文件”，包括：
    #1 web应用程序部署描述符(web.xml，在Servlet规范中定义)；
    #2 您创建的自定义标记库的标记库描述符，以及
    #3 您希望包含在web应用程序中的其他资源文件。
    即使该目录看起来是文档根目录（/web as document root）的子目录，但 “Servlet规范"禁止将该目录(或其中包含的任何文件)的内容直接提供给客户端请求。因此，这是存储敏感配置信息(例如数据库连接用户名和密码)的好地方，但这些信息是应用程序成功运行所必需的。


===
在开发过程中，将临时创建两个额外的目录:

#1 build/ -当您执行默认的构建(ant)时，此目录将包含”此应用程序的web应用程序存档文件“的精确映像（image）。
Tomcat允许您在这样的解包目录中部署应用程序：
    #1 可以将其复制到$CATALINA_BASE/webapps目录，
    #2 也可以通过“Manager”web应用程序安装它。
后一种方法在开发过程中非常有用，下面将对其进行说明。


#2 dist/ -当你执行ant dist目标时，这个目录将被创建。
它将为您的web应用程序创建”二进制发行版“的精确映像，包括您准备的#1 许可信息、#2 文档和 #3 README文件。

请注意，这两个目录不应该归档到（be archived in）源代码控制系统中，
因为在开发过程中，它们会根据需要（as needed）被删除并重新创建(从头开始)。
出于这个原因，如果您想要维护永久的变更，就不应该编辑这些目录中的任何源文件，因为下一次执行构建时，这个目录下的更改将会丢失。

