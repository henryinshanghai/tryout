第一步是创建一个新的项目源目录，并自定义build.xml 和 开发者将会使用的build.properties。
目录结构已在前一节中描述，或者您可以使用示例应用程序作为起点。

创建项目源目录，并在源代码控制系统中定义它。这可以通过一系列类似这样的命令来完成:
    cd {my home directory}
    mkdir myapp <-- Assumed "project source directory"
    cd myapp
    mkdir docs
    mkdir src
    mkdir web
    mkdir web/WEB-INF
    cvs or svn or git ... <-- Add this structure to the appropriate repository


为了验证在源代码控制存储库中正确地创建了项目，您可能希望将项目签出到一个单独的目录中，并确认所有预期的内容都存在。

接下来，您需要创建并签入”build.xml脚本的初始版本“，以用于开发。
为了快速轻松地开始，您可以：
#1 从本手册中包含的基本build.xml文件的基础上，建立开发者自己的build.xml;
#2 或者从头编写它。
    cd {my home directory}
    cd myapp
    emacs build.xml     <-- if you want a real editor :-)
    cvs or svn or git ... <-- Add this file to the repository

下一步是 自定义”在build.xml脚本中命名的Ant属性“。
这是通过在项目顶级目录中，创建一个名为build.properties文件 来 完成的。
所支持的属性列在示例build.xml脚本中的注释中。
最小配置的情况下，开发者通常需要定义catalina.home属性（Tomcat安装位置），以及 管理器应用程序的用户名和密码。
你可能会得到这样的结果:
    # Context path to install this application on
    app.path=/hello

    # Tomcat installation directory
    catalina.home=/usr/local/apache-tomcat-10.1

    # Manager webapp username and password
    manager.username=myusername
    manager.password=mypassword

一般来说，您不会想要把 build.properties文件 添加到源代码控制存储库，因为它对于每个开发人员的环境都是唯一的。

现在，创建web应用程序部署描述符的初始版本。你可以：
#1 在基本的web.xml文件的基础上编写web.xml；
#2 或者从头开始编写。
    cd {my home directory}
    cd myapp/web/WEB-INF
    emacs web.xml
    cvs or svn or git ... <-- Add this file to the repository

注意，这只是一个示例web.xml文件。部署描述符文件的完整定义在Servlet规范中。


