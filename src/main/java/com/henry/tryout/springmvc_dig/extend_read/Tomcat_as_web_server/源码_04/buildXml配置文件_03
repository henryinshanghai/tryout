我们将使用ant工具 来 管理Java源代码文件的编译，以及”部署层次结构“的创建。
Ant在构建文件(通常称为build.xml)的控制下操作，该文件定义了所需的处理步骤。
该文件存储在”源代码层次结构的顶级目录“中，应该检入到源代码控制系统中。


像Makefile一样，build.xml文件提供了几个支持可选开发活动的“目标”(例如
#1 创建相关的Javadoc文档，#2 擦除部署主目录以便从头构建项目，#3 或者”创建web应用程序归档文件“以便分发应用程序)。
一个构造良好的build.xml文件将包含 #1 用于 描述”为开发人员使用而设计的目标“ 的内部文档，#2 以及内部使用的目标。

如果想要 要求Ant显示项目文档，请更改到”包含build.xml文件的目录“并键入：
ant -projecthelp

为了让您有一个良好的开端，这里提供了一个基本的build.xml文件，开发者可以自定义该文件并将其安装在应用程序的项目源目录中。
该文件包含”描述可执行的各种目标“的注释。
简而言之，一般提供以下指标:

#1 clean
- 该目标删除任何现有的build和dist目录，以便它们可以从头开始重建。
这样能够保证开发者 不会因为忘记重新编译”因为改动所影响到的类“而 导致在运行时出现问题。

#2 compile -
此目标用于编译自上次编译以来”已更改的任何源代码“。
生成的类文件创建在构建目录的 WEB-INF/classes子目录中 - 正是web应用程序的结构需要它们的位置。
由于此命令在开发过程中经常执行，因此通常将其作为“默认”目标，以便一个简单的ant命令就能够执行它。

#3 all -该目标是”运行clean目标，然后运行compile目标“的快捷方式。
因此，它保证您将重新编译整个应用程序，以确保您没有在不知不觉中（unknowingly）引入任何不兼容的更改。

#4 javadoc —— 这个目标为 ”这个web应用程序中的Java类“ 创建javadoc API文档。
示例build.xml文件假设开发者想”将API文档包含在你的应用分发中”，所以它会在dist目录的子目录中生成docs。
因为您通常不需要在每次编译时生成Javadocs，所以这个目标通常是“dist目标的依赖项”，而不是compile目标的依赖项。

#5 dist - 该目标为您的应用程序创建一个“分发目录”，包括：#1 任何必需的文档、#2 Java类的Javadocs 和 #3 一个web应用程序存档(WAR)文件，
该文件将被交付给”希望安装您的应用程序的系统管理员“。
因为”这个目标“也依赖于deploy目标，所以web应用程序存档还将获取到 ”部署时所包含的任何外部依赖项“。


#6 install — 告诉”当前运行的Tomcat“使”您正在开发的应用程序“立即能够执行和测试。
该操作不需要重新启动Tomcat，但是在Tomcat下次重新启动后也不会记住该操作。

#7 reload —— 一旦安装了应用程序，就可以”继续使用compile目标进行更改和重新编译“。
Tomcat将自动识别”对JSP页面的更改“，但不识别”对servlet或JavaBean类“的更改。
该命令将告诉Tomcat”重新启动当前安装的应用程序“，来 识别这些更改。

#8 remove — 当您完成开发和测试活动时，您可以选择”告诉Tomcat从服务中删除该应用程序“。

使用 development 和 testing 目标需要一些额外的一次性设置，这将在下一页中描述。

