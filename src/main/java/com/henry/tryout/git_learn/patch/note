patch的用法

A分支、B分支；

case01:A分支中不存在 龟虽寿文件，B分支中 存在龟虽寿文件，且此此文件有原始提交 & 更新提交；
现在 开发者把B分支的 更新提交，创建出了一个 patch（补丁）。并尝试把这个补丁 apply to A分支

结果：由于A分支中没有 龟虽寿的原始文件，而 patch文件中只包含有 更新提交中所引入的变更，
因此 Git会判定 A分支中缺少 “应用此补丁的原始文件”。
这时候开发者就需要从 B分支中找到龟虽寿文件，手动拷贝到A分支中（这样做之后，也就不需要再应用patch了）

case02: A分支中存在 龟虽寿文件，但内容只是节选了全文的前三句（版本1），
B分支中 存在龟虽寿文件，且内容包括完整全文 + 单词注释（版本2）。
现在 开发者把 B分支中的更新提交创建出了一个 patch。并尝试 把这个补丁 apply to A分支。

结果：由于A分支中存在 龟虽寿的文件，但版本（内容）与B分支存在差异，而 patch文件中只包含有 更新提交所包含的变更。
所以 Git会列举出 A分支中龟虽寿文件 与 B分支中龟虽寿文件的差异（hunk），虽然处理后，可以apply successfully.
但其实工作目录下的文件没有任何变化。也就是说 补丁并没有应用成功

看起来，成功应用补丁需要有很严苛的条件：
#1 分支A与分支B存在有 文件名相同的文件；
#2 分支A与分支B上的 同名文件不能有 显著差异??? 但是没有差异为啥要做patch呢？

带着疑问来阅读

reference：https://initialcommit.com/blog/git-format-patch

