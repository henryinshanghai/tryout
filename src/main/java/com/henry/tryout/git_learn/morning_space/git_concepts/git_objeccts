参考：https://morningspace.github.io/tech/inside-git-1/

===
Git（本质上是一个数据库）
作用：对项目中的文件集合进行版本管理 - 这意味着开发者能够在需要的时候对文件 {#1 添加一个新版本; #2 回退到某一个历史版本; #3 对两个版本做比较}
原理：基于文件系统的、存储“键值对”的数据库。

概念 - 作用 - 实现方式
#1 工作目录 - 用于存储项目中的所有文件 {已被Git管理; 未被Git管理} - 文件夹&文件
#2 暂存区 - 用于临时存储 准备提交的、发生了改动的所有文件 - .git/index文件
#3 提交历史区 - 用于记录 由“项目在某个时刻的快照”所组成的历史 - .git/objects目录

== Git对象 ==
作用：用于具体表示 Git中的各种基础概念；
特征：存储在 .git/objects目录中；

.git/refs目录 - 用于存储指向Git对象的引用；

对象的存储：(id -> instance)
    #1 对象会存储在 .git/objects目录下；
    #2 使用40位hash值的前2位作为 存储对象的子目录的名称；
    #3 使用40位hash值的后38位作为 存储对象的文件的名称；
    #4 文件中的内容，就是对象的值；

对象的分类：
    #1 blob对象 - 用于表示一个文件；
    特征：git会根据文件的内容 来 生成blob对象，而不关心文件的名称；
    验证：两个具有相同内容的文件，git只会使用一个blob对象进行存储。

    #2 tree对象 - 用于封装 多个文件&它们的文件名，进而表示一个文件夹结构；
    特征：#1 允许嵌套子tree对象，也就是 可以有子目录； #2 逻辑结构上讲，它的叶子节点总是 blob对象；
    用法：保存项目中文件集合的快照；
    应用：index文件(暂存区)中存储的应该就是一个 与项目根目录相对应的tree对象；
    fact: 可以使用 git update-index命令 来 手动更新暂存区；

    #3 commit对象 - 用于封装tree对象 & 与提交动作有关的元信息；
    特征：
        #1 commit对象一般都会有自己的parent commit，因此commit本身是一个链表的结构；
        #2 由于是对tree对象进行的封装，因此 通过commit对象就能够找到tree对象中的所有blob对象（文件）；
    应用：由多个相继的commit（项目的快照），Git就能够记录 项目的变化过程。

    #4 tag对象 - 用于封装 commit对象 & 与tag工作有关的元信息；
    特征： 一旦tag对象关联到某个commit对象，这种关联关系就不会发生变化；
    应用：作为commit对象的别名，用来 标识commit历史中有特殊意义的commit。


