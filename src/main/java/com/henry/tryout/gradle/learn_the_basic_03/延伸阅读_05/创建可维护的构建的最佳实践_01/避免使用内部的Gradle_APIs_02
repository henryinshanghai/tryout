“在插件和构建脚本中使用Gradle内部api” 有可能在Gradle或插件发生更改时，破坏构建。

以下包在 “Gradle公共API定义” 中列出，除了名称中带有“internal”的子包:
org/gradle/*
org/gradle/api/**
org/gradle/authentication/**
org/gradle/buildinit/**
org/gradle/caching/**
org/gradle/concurrent/**
org/gradle/deployment/**
org/gradle/external/javadoc/**
org/gradle/ide/**
org/gradle/includedbuild/**
org/gradle/ivy/**
org/gradle/jvm/**
org/gradle/language/**
org/gradle/maven/**
org/gradle/nativeplatform/**
org/gradle/normalization/**
org/gradle/platform/**
org/gradle/play/**
org/gradle/plugin/devel/**
org/gradle/plugin/repository/*
org/gradle/plugin/use/*
org/gradle/plugin/management/*
org/gradle/plugins/**
org/gradle/process/**
org/gradle/testfixtures/**
org/gradle/testing/jacoco/**
org/gradle/tooling/**
org/gradle/swiftpm/**
org/gradle/model/**
org/gradle/testkit/**
org/gradle/testing/**
org/gradle/vcs/**
org/gradle/workers/**

-- 常用内部api的替代方案 --
想要“为自定义任务提供嵌套的DSL”，不要使用org.gradle.internal.reflect.Instantiator;
使用ObjectFactory代替。
阅读“惰性配置” 章节也会有所帮助。

不要使用org.gradle.api.internal.ConventionMapping。
使用 Provider 和/或 Property。
您可以在“实现插件”一节中找到 “捕获用户输入以配置运行时行为” 的示例。

而不是org.gradle.internal.os.OperatingSystem，使用另一个方法来检测操作系统，
例如Apache common -lang SystemUtils 或 system . getproperty ("os.name")。
