public V put(K key, V value) {
    int hash = hash(key);
    int i = indexFor(hash, table.length);

    // 找到数组对应下标的位置 - 手段：使用hashCode
    // 是要覆盖旧的元素 or 添加新的元素 - 手段：根据equals()方法所返回的boolean类型结果
    for(Entry<K, V> e = table[i]; e != null; e = e.next) {
        // 如果key的hash是相同的，则：判断key是不是相同的key - 手段：等值判断 或者 equals()判断；
        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {
            V oldValue = e.value;
            e.value = value;
            return oldValue;
        }
    }

    // 还没有添加元素就进行 modCount++ - 这会导致很多的隐患
    modCount++;

    // 添加新的元素 - 最后一个参数i是 table数组的下标
    addEntry(hash, key, value, i);
    return null;
}

void addEntry(int hash, K key, V value, int bucketIndex) {
    // 如果：#1 元素的个数达到threshold的扩容阈值; #2 数组下标位置上已经存在有元素。则：进行扩容
    if((size > threshold) && (null != table[bucketIndex]) {
        // 把容量扩大为先前的两倍  - size是元素的数量, table.length为数组的容量
        resize(table.length * 2)
        hash = (null != key) ? hash(key) : 0;
        bucketIndex = indexFor(hash, table.length);
    }

    createEntry(hash, key, value, bucketIndex);
}

// 插入元素 - 头插法
void createEntry(int hash, K key, V value, int bucketIndex) {
    // 记录下当前哈希槽上的Entry元素
    Entry<K, V> e = table[bucketIndex]; // #1
    // 创建一个新的Entry节点放到哈希槽中，并把旧的Entry节点接到新节点的后面
    table[bucketIndex] = new Entry<>(hash, key, value, e);
    size++;
}

多线程下，JDK7中对put()方法的实现可能会有如下问题：
时间顺序下：
step1 线程A 执行到#1时，由于CPU时间片结束而被挂起;
step2 线程B获取到CPU时间片，并顺利执行了整个createEntry()方法 - 这时新的entry已经被添加完成
step3 线程A重新获取到时间片，会继续从#1处开始执行 - 这就会导致 线程B所添加的新entry被覆盖掉

