public V put(K key, V value) {
    return putVal(hash(key), key, value, false, true);
}

// 计算并返回 指定的key的hash值
static final int hash(Object key) {
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
}

// 向hashMap实例对象中 添加指定的key-value键值对
/*
    参数列表：
    onlyIfAbsent – if true, don't change existing value
    evict – if false, the table is in creation mode.

    返回值：返回当前map对象中key所关联的value,如果没有对应的key则返回null
*/
final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
    // 局部变量: tab是散列表的副本; p是链表节点的指针; n是tab数组的长度; i是散列表中的索引值;
    Node<K,V>[] tab; Node<K,V> p; int n, i;
    // 如果散列表table为null或者为空时，则：#1 初始化散列表table - resize()；#2 初始化 tab 与 n;
    if ((tab = table) == null || (n = tab.length) == 0)
        n = (tab = resize()).length;

    // 找到key在哈希表中命中的索引位置 - i = (n - 1) & hash
    // 并取出命中的哈希槽中的节点p - tab[i]
    if ((p = tab[i = (n - 1) & hash]) == null) // 如果哈希槽中还没有任何东西，则：
        tab[i] = newNode(hash, key, value, null); // 在哈希槽中创建一个 链表节点
    else { // 如果哈希槽中已经有东西了，则：
        Node<K,V> e; K k;

        // #1 判断hash槽中的节点的key 与 待插入的key-value中的key 是不是相同
        if (p.hash == hash &&
            ((k = p.key) == key || (key != null && key.equals(k)))) // 如果是（说明key已经存在），则：使用局部变量e 来 记录下当前节点p
            e = p;
        else if (p instanceof TreeNode) // 如果当前节点p是一个树节点，则：将key-value添加到树p中 - 手段: p.putTreeVal(xxx)
            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
        else { // 否则，说明：#1 哈希槽中已经存在链表； #2 链表中第一个节点的key 与 待插入的key-value中的key不相同(没有出现碰撞)
            for (int binCount = 0; ; ++binCount) { // 则：对链表中的节点进行遍历
                if ((e = p.next) == null) { // 如果当前节点是 链表的尾节点，则：
                    p.next = newNode(hash, key, value, null); // 使用待插入的key-value来创建一个新的节点，并添加到链表中
                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st // 如果链表的长度大于7，则：进行树化的操作 - 手段：treeifyBin
                        treeifyBin(tab, hash);
                    break; // 插入节点后,主要任务已经结束 - 跳出循环
                }
                // 如果当前节点的key 与 待插入的key-value中的key相同（说明发生碰撞），则：
                if (e.hash == hash &&
                    ((k = e.key) == key || (key != null && key.equals(k))))
                    break; // 找到待更新的节点，跳出循环
                // 记录当前所遍历的节点 - 作用：方便更新到它的下一个节点 p.next
                p = e;
            }
        }

        // 对于以上的3种情况（每个分支中都会更新变量e），如果变量e不为null（说明Map中已经存在有对应的key了），则：
        if (e != null) { // existing mapping for key
            V oldValue = e.value;
            // 判断是否需要更新旧节点的值：#1 onlyIfAbsent的值(if true, don't change existing value); #2 旧节点的值是否为null
            if (!onlyIfAbsent || oldValue == null)
                e.value = value; // 只要有一个条件为true，就更新旧节点的value值
            afterNodeAccess(e); // N/A 是一个空方法
            return oldValue; // 返回旧节点的value值
        }
    }
    ++modCount; // 更新变化次数modCount
    if (++size > threshold) // 判断是否需要进行map的扩容，如果需要，则：
        resize(); // 进行扩容
    afterNodeInsertion(evict); // N/A 这是一个空方法
    return null; // 返回null - 表示传入的key-value已经成功插入到 hashMap中了
}