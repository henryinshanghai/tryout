TreeMap
    底层数据结构：红黑树；
    特性：
        1 增删改查操作的平均复杂度、最坏复杂度都是 O(logn);
        2 实现了NavigableMap接口；
        3 Key是有序的。
    源码分析：
        类名 + 成员属性；

插入节点前的约定：
#1 插入的节点是红色的；
#2 如果插入的节点的父节点是黑色的，则：红黑树所有的约束都没有被破坏，不需要做任何调整额；
#3 如果插入新节点的父节点是红色的，则：破坏了约束 - 不能出现两个相邻的红色节点。
    会进入循环判断，在循环体中，要么重新着色，要么左右旋转 - 最终满足所有的约束条件。
    循环的退出条件：
        while (x != null && x != root && x.parent.color == RED) {...}
        说明：
            #1 如果插入的节点是根节点，则：设置为黑色节点，然后直接退出；
            #2如果不是根节点，并且 插入节点的父节点是红色节点，则：一直进行调整，直到退出循环。

插入节点的过程：
    #1 按照二叉查找树的约定来插入节点 - 按照Key的比较往下遍历，大于被比较节点，则往右走；小于被比较节点，则往左走；
    #2 节点插入后，如果破坏了红黑树的特性(约束4、5)，则：进行重新着色与旋转，恢复红黑树。

put()源码分析：