Collection:
四个子接口 & 具体实现所使用的数据类型：
    - List
    - Set
    - Queue
    - Map // 表、树、哈希

接口 -> 抽象类 -> 并发包中的具体类；

---
List
    是：一个用来存放元素的集合；
    特征：
        1 属于线性数据结构, aka, 存在有明确的上一个元素、下一个元素。第一个元素、最后一个元素；
        2 对List对象的遍历结果是稳定的；
        3 最常使用的实现类是 ArrayList；
    用法：
        1 ArrayList；
            特征：
                1 容量可变；
                2 非线程安全；
                3 访问操作很快，但是插入与删除操作比较慢 - 因为底层使用了数组；
            存储原理：
                在内部使用数组来存储元素，在扩容时，会创建更大的数组空间，并拷贝旧数组中的元素到新的数组中；
        2 LinkedList；
            特征：
                1 链式存储。aka 插入与删除操作很快，但是访问操作比较慢 - 因为底层使用了链表；
                2 继承自 AbstractList抽象类；
                3 实现了 Deque接口（double-ended queue）- 这个接口既是栈又是队列；
            存储原理：
                在内部使用双向链表来存储元素；
            实现原理：
                成员变量：size、first节点引用、last节点引用；

---
Queue集合

特征：
    1 最先存储进queue中的元素，会最后被取出；
    2 线性数据结构；
    3 只允许 在队列的一端执行插入操作，另一端执行取出操作；
应用：
    BlockingQueue非常适合于高并发编程场景，可以用作缓存区(Buffer)

---
Map集合

特征：
    1 数据结构中存储的元素是 Key-Value键值对；
    2 数据结构本身是哈希类型的；
    3 Entry中的key是唯一的，而value是可以重复的；
    4 多线程下，不安全。
用法：
    1 获取所有的key - keySet();
    2 获取所有的value - values();
    3 获取所有的key-value - entrySet();
同班同学：
    ConcurrentHashMap；
        特征：1 线程安全； 2 性能还不错；
    TreeMap：
        特征：Key是有序的。

---
Set集合

特征：
    1 数据结构中不允许存入重复的元素；
用法：
    1 HashSet；
        特征：
            1 底层使用HashMap实现 - key被固定为一个 静态对象；
            2 不保证集合元素的存储顺序 与元素的存入顺序相同；
    2 TreeSet；
        特征：
            1 底层使用 TreeMap实现，是一个树形结构；
            2 能够保证集合中元素的有序性；
                原理：添加新元素到集合中时，按照某种规则将之插入到合适的位置，以此保证有序性。
    3 LinkedHashSet；
        特征：
            1 继承自 HashSet；
            2 元素的存储顺序 与 元素的插入顺序相同；
                原理：使用链表；

