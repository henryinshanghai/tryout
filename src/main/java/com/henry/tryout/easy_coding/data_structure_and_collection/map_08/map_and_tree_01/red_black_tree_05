红黑树
是：二叉查找树；
添加的约束：
    保证 从根节点到叶子节点的最长路径 不超过 最短路径的2倍；- 因此不是平衡树
原理：在插入与删除元素时，通过特定的旋转来保持自身平衡。
基础手段：// 实现自平衡
    1 重新着色；
    2 左右旋转；
新的约束：
    1 节点只能是红色和黑色；
    2 根节点必须要是黑色节点；
    3 所有的NIL(Nothing in Leaf)节点都是黑色的；
    *4 一个路径上不能出现相邻的两个红色节点；
    *5 在任何递归子树上，根节点到叶子节点的所有路径上，都要包含相同数量的黑色节点。
概念：
    1 NIL， nothing in leaf。
        是：叶子节点上 并不存在的两个虚拟节点；
        作用：用于支持 红黑树中的旋转操作；
        特征：默认为黑色。
    2 节点的黑深度(black depth);
        指 从当前节点开始，到NIL节点为止 形成的路径上的黑节点的个数。
        约束4 + 5 推论：black_height(current_node) >= height(current_node) / 2;
        语言描述： 对于任何 包含n个节点的红黑树 来说，height(root_node) <= 2log(n+1);
约束总结：
    有红必有黑，红红不相连。
    作用：保证了 红黑树的新增节点、删除节点、查找节点的最坏时间复杂度为 O(logn);
特征：
    1 如果 树的左子树或右子树 不存在，则：认为存在黑色的NIL节点；
    2 红黑树的旋转操作 都能够 在3次操作中完成？？？

为什么 比较扁平的树结构 能够保证 O(logn)的操作复杂度？1 -> 2 -> 3
    #1 常规的BST操作比如查找、插入、删除等，时间复杂度为 O(h),aka, 取决于树的高度；
    #2 当树失衡的时候，时间复杂度 将会恶化成为O(n),aka, h = n;
    #3 当我们能够保证 树的高度始 终保持在 O(logn)时，就能够保证 所有操作的时间复杂度都能够保持O(logn)以内。
