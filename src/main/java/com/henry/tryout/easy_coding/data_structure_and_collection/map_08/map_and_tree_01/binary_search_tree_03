二叉查找树/二叉排序树（Binary Search Tree）
    是：节点数值上添加了约束 的二叉树；
    作用：用于快速查找；
    特征/约束：
        #1 对于任意节点，它的左子树上的所有节点的值 都小于它的值；
        #2 对于任意节点，它的右子树上的所有节点的值 都大于它的值；aka 左 < 根 < 右。
    高层用法：
        1 查找过程从根节点开始；
        2 如果节点值＞预期值，则：往左子树上查找；
        3 如果节点值＜预期值，则：往右子树上查找；
    基础用法：
        #1 前序遍历； 根 - 左 - 右；
        #2 后序遍历； 左 - 右 - 根；
        #3 中序遍历； 左 - 根 - 右；
        特征：
            1 在任何递归子树中，左节点 一定 在右节点之前先遍历；
            2 前序、中序、后序指的是 “遍历时根节点的位置”。
    特征：
        由于只是 在数值上进行了约束，所以二叉查找树 有可能演变成为一个链表 - 由于结构上极不平衡，所以查询时间复杂度退化成为 O(n);

怎么处理这种情况呢？
手段：使用某种方式，在添加节点时，就及时维护树的平衡性。
    具体实现1：AVL树；
    具体实现2：红黑树；