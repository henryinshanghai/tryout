Map VS. Collection
Map：
    是：一个接口；
    高层特征：
        1 与 Collection类平级的接口；
        2 Map有部分方法会返回Collection视图；- 比如 values()返回所有value构成的列表
        3 Map中存储单位是 KV键值对/Entry；
    原理：
        #1 先使用一定的哈希算法来产生一组比较均匀的哈希值 作为Key；
        #2 Value值 关联在 Key上面。
    用法特征：
       1 没有重复的Key，可以有重复的Value；
       2 Value可以是 List、Map、Set类；
       3 KV是否可以为null，不同的实现类会有不同的规矩。
       4 处理CRUD的方法外，还有3个专用的方法 - keys(), values(), entrySet()
            #1 这些方法返回的是数据的一个视图；
            #2 这些个视图支持 清除操作(clear()),但是 修改和增加元素会抛出异常；
                原因：AbstractCollection实现了 clear、remove，但是没有实现 add；

------
是否能够将KV设置成为 null - 取决于实现类提供的约束

ConcurrentHashMap -
    特征：
        1 Key不允许为null，Value也不允许为null。
        2 锁分段技术 / CAS（JDK1.8）
HashMap
    特征：
        1 Key允许为null，Value也允许为null。
        2 线程不安全；

结论：
    1 多数情况下，使用 ConcurrentHashMap 替代 HashMap没有任何问题 - 性能区别不大，而且更安全。
    2 在任何Map类中，都需要尽量避免给KV被置为 null值；

------
红黑树





