AVL树：
    是：
        一种平衡查找树（树的左右高度差不能超过1） + 二叉查找树(左 < 根 < 右)；
    原理：
        在添加或删除节点后，通过旋转操作，使树及时地恢复平衡；
    基础手段：
        右旋；
            以当前节点为中心：// 顺时针旋转
            #1 把 它沉入当前右子节点的位置； 那原来的右子节点去哪儿了呢？答：变成了 现在右子节点的右子节点
            #2 把 当前节点的左子节点 作为新书的根节点。
        左旋：
            以当前节点为中心，逆时针旋转。
    用法：
        当根节点的左子树与右子树的高度差大于1时，通过旋转，使树恢复平衡。
        应该选择哪种旋转方式呢？根据情况决定


