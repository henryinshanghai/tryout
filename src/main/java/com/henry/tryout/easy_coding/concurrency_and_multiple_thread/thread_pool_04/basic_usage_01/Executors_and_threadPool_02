Executors 与 ThreadPoolExecutor之间的关系

Executor接口 -> ExecutorService接口 作用：定义管理线程任务的方法；
ExecutorService接口 -> AbstractExecutorService抽象类
                        作用：提供了 submit()、invokeAll()方法的实现
                        特征：抽象类中没有实现execute()方法

Executors类：
高层用法：通过静态工厂方法 来 创建线程池的包装对象；
    1 ForkJoinPool;
    2 ThreadPoolExecutor;
    3 ScheduledThreadPoolExecutor;

Executors的核心方法：
    参考：ThreadPoolExecutorClassRelationship_02

Executors中默认的 线程工厂 与 拒绝策略太过简单，对用户不很友好。
- 线程工厂；
    希望它能够 对线程池创建的线程添加明确的标识 - aka，为线程本身指定有意义的名称和相应的序列号。
    Demo: UserThreadFactory
    一个有意义的线程名称，能够帮助定位 issue的root cause 以及 具体位置、业务场景等。

- 拒绝策略；
    希望拒绝策略能够考虑到具体的业务场景，给出相应的提示 或者 友好地跳转。
    Demo: UserRejectHandler

    ThreadPoolExecutor中提供的四个 静态内部类：
    #1 AbortPolicy（默认）：丢弃任务，并抛出 RejectedExecutionException异常。
    #2 DiscardPolicy：丢弃任务，但是不抛出异常(不推荐)；
    #3 DiscardOldestPolicy: 丢弃队列中等待最久的任务，然后把当前任务添加到队列中。
    #4 CallerRunsPolicy：直接调用任务的run()方法, aka, 绕过线程池。
Usage Demo: UserThreadPool