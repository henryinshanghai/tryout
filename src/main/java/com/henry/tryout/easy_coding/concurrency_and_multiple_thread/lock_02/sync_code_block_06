同步代码块
    什么叫做同步？
        同一时刻只能有一个线程执行，就叫做同步？
    实现手段：
        使用Java的 synchronzied关键字；
    用法1：
        在方法签名上添加 synchronized关键字；
    用法2：
        在代码块前添加 synchronzied(对象/类)，实现 代码的同步。
    原则：
        能锁代码块，不要锁方法；能锁对象，不要去锁类。

    原理：
        synchronized关键字的特性由 JVM来实现。
        JVM底层是通过 监视锁 来实现synchronized的特性的；
        监视锁 monitor:
            是：一个隐藏字段；
            特征：每个对象与生俱来就拥有它。
        在开发者使用 synchronized关键字的时候，JVM会
        1 根据synchronized的当前使用环境，来找到对应对象的monitor；
        2 再根据monitor的状态 进行加锁、解锁的判断。
    过程：
        当线程进入同步方法或代码块的时候，线程会
        1 获取该方法/代码块所属对象的monitor；
        2 然后进行加锁判断；
            如果成功加锁，线程就会成为该monitor的唯一持有者 - monitor在被释放之前，不会再被其他线程持有

通过字节码 来 学习synchronized关键字的实现原理：
字节码省略...

解释：
方法元信息中 会使用 ACC_SYNCHRONIZED 来表示方法是一个同步方法；
同步代码块中会使用 monitorenter 与 monitorexit两个字节码 来 获取与释放monitor；
使用monitorenter 进入时，
    如果 monitor为0，则：
    1 表示该线程可以持有 monitor后继代码；
    2 并把 monitor加一；
    如果 当前线程已经持有了 monitor,则：
        monitor继续加一；
只要monitor不是0，那么 其他线程就会进入阻塞状态。

JVM对synchronized的优化手段：
    1 对monitor的加锁 与 解锁上。
    2 JDK6之后，为 synchronized 添加了不同的锁的实现：
        偏向锁、轻量级锁、重量级锁。
    3 提供了锁的升级与降级机制。

偏向锁：
    是：JVM利用CAS 在对象头上设置线程的ID - 表示对象会偏向于当前线程。这就叫做 偏向锁
    作用：
        在资源没有被多线程竞争的情况下 尽量减少 锁带来的性能开销。
    原理：
        在锁对象的对象头中有一个 ThreadId字段；
        当第一个线程访问锁时，如果这个锁还没有被其他线程访问过，则：
            1 JVM会让线程持有偏向锁；
            2 并把锁的ThreadId设置为 当前线程的ID。
        当有线程再次获取锁的时候，会判断 当前线程的ID 与 锁对象的ThreadId是不是一致。
            如果一致，则：此线程不会再重复获取锁 - 因此提高了程序的运行性能
        如果出现了锁竞争的情况，则：偏向锁会被撤销，并且升级成为轻量级锁。
        如果资源竞争非常激烈，则：锁会被升级成为重量级锁。
    特征/总结：
        偏向锁可以降低 无竞争开销；aka, 在不存在线程竞争的情况下，它省掉了再次判断的步骤，因此提升了性能。



