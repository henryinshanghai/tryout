程序代码 -> 字节码(中间层) -> CPU指令

一个字节就能够表示 Java中所有存在的指令。
Java指令总共有200个，而一个字节可以表示 256种可能

cafe babe : 标识文件是一个Java类文件；

字节码的助记符号 👇
特征：首字母表示 变量的类型。 A表示引用类型变量， I表示int类型变量
字节码指令分类：
1 加载/存储指令；
                  加载到
虚拟机栈的 局部变量表 <-> 操作栈
                  存储到
2 运算指令；
    用来 对操作栈上的两个值进行运算，并把结果写回到 操作栈顶。

3 类型转换指令；
4 对象的创建与访问指令；
5 操作栈管理指令；
6 方法调用与返回指令；
7 同步指令； 支持语法层面的同步操作

======
phase2：由 类加载器 把得到的 class文件加载到内存中。

类加载过程：
作用：进行类的 加载、链接与初始化；
step1 Load阶段；
    读取类文件，创建二进制流，并转化成为特定的数据结构。
    特征：
        1 会校验 cafe babe魔法数、常量池、文件长度、是否存在父类等；
        2 会创建类的Class实例；

step2 Link阶段；
    验证 - 准备 -解析；
    验证：更详细的校验 - final是不是合规、类型是不是正确、静态变量是不是合理；
    准备：
        1 给静态变量分配内存，并设定默认值；
        2 解析类与方法 以确保类与类之间的引用的正确性；
        3 完成内存结构布局；

step3 init阶段；
    初始化：执行类的构造器<init>方法；
    特征：如果初始化操作是通过 其他类的静态方法来实现的，则：会去解析另外一个类 - 通过虚拟机栈中执行完毕后，通过返回值来进行赋值。

big picture:
    字节码 -> 类加载(load、link、init) -> 解释执行/JIT编译

------
warp up:
类加载 是一个过程，在这个过程中实现：
    1 把 .class字节码文件实例化成为 Class对象，并进行相关的初始化过程；
    特征：
        1 JVM会初始化 继承树上还没有被初始化过的所有父类；
        2 执行这个链路上所有 没有被执行过的静态代码块、静态变量赋值语句等；
        3 程序员可以干预这个过程。