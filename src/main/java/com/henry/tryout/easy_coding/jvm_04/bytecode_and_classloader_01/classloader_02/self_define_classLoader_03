======
双亲委派模型并不是一个强制的规范，那什么时候会需要自定义类加载器呢？

#1 在某些框架中，需要进行 中间件 与 应用的模块 隔离(从而把 类 加载到不同的环境中)时：
    原理：通过自定义的类加载器 来确保 应用中依赖的jar包 不会影响到 中间件运行时使用的jar包。
    - 这不是项目依赖的问题吗？为啥和类加载器有关系

#2 当开发者想要 修改类加载的方式时：
    类的加载机制不是一种强制规范,aka, 除了 Bootstrap之外，其他的加载并不一定需要引入。
    应用：可以根据实际情况在某个时间点 进行按需动态加载

#3 当开发者想要 扩展 类加载的源头时：
    比如从数据库、网络 或者电视的机顶盒进行加载

#4 当开发者想要 防止源码泄露
    Java代码容易被编译和篡改，可以进行 编译加密。
    原理：此时就需要自定义类加载器 - 来还原加密的字节码。

实现自定义类加载器SOP：
    1 继承 ClassLoader；
    2 重写 findClass()方法；
    3 调用defineClass()方法；

demo: CustomClassLoader

中间件一般都会有自己所依赖的jar包，
当在同一个项目中引用多个框架的时候，很大可能需要被迫 进行类的仲裁。- 这是 jar包的冲突吗？
按照某种规则 jar包的版本被统一指定，这会导致 如果有些类的包路径、类名一样的时候，引起类的冲突。
所以 主流的容器类框架都会自定义类加载器，来实现不同中间件之间的类的隔离，从而避免了类的冲突。
