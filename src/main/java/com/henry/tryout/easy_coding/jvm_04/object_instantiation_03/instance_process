fact: Java是 静态强类型语言；
常见的代码： 根据某个类 来 声明一个引用变量，去 指向被创建的对象。
aka 实例化一个类，得到类的实例对象，并 绑定到一个引用变量上。

从执行步骤 来 分析对象的实例化过程：
step1(Load)： 确定类的元信息 是不是存在；
    原理：JVM在 接收到new指令 时，首先 在metaspace中 检查 所需要创建的类元信息 是否存在；
        如果不存在，则: 遵守 双亲委派模型 - 使用当前类加载器，以 "ClassLoader + 包名 + 类名" 作为Key 来 查找对应的.class文件。
            如果没有找到文件，会抛出 ClassNotFoundException异常；
            如果找到，则：进行类加载，并 生成对应的Class类对象。

step2(Save)： 为对象分配内存空间；
    步骤 1 先计算对象占用的空间大小。
            如果成员变量是 引用变量，则：只分配引用变量的空间。aka 4个字节大小
        2 再在堆中 为对象分配空间；
        特征：
            1 在分配内存空间时，需要进行同步操作（加锁，CAS失败重试等），以此保证 分配操作的原子性。
            2 引用变量会被添加到 虚拟机栈的栈顶。

step3(Default) 设置默认值(初步)；
    类中所有的成员变量 都会被设置各自形式的零值。

step4(Meta) 设置对象头(开发者接触不到,但却至关重要的信息)；
    作用：设置 新对象的哈希码、GC信息、锁信息、对象所属的类元信息 - 取决于 JVM的具体实现

Step5(Init) 执行init方法(调用构造方法,初始化成员变量 并绑定对象地址到 引用变量上)；
    作用：
        1 真正地初始化成员变量；
        2 执行实例化代码块；
        3 调用类的构造方法；
        4 把堆内存中 对象的首地址 赋值给 引用变量。 - 赋值操作，其实是把对象的首地址赋值给引用变量；

wrap up:
new的过程发生了啥？（LSDMI）
1 加载.class文件,并生成Class对象（Load）;
2 为实例对象开辟(Save)内存空间;
3 为类的成员变量进行 零值初始化(Default);
4 设置对象的一些元信息(Meta);
5 执行构造方法,并绑定实例对象到变量(Init)。