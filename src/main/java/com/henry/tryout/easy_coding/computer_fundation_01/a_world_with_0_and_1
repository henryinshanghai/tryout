从硬件角度来说，计算机 = 晶体管 + 电路板；aka，计算机是一个电子器件
所以，不管是 图形图像的渲染、网络远程共享，还是 大数据运算，本质上 都只是对0和1的处理。

-- 0与1的物理表现 --
#1 三极管的通电与断电；
#2 CPU的低电平与高电平；
#3 磁盘电荷的左右方向；

-- 二进制的进位规则 & 借位规则 --
进位规则：逢二进一；
借位规则：借一当二；

-- 使用二进制数字 来 表示日常生活中的十进制数字 --
1 = 1
10 = 2
100 = 4
1000 = 8
11000 = 24

-- 对硬件的假设与推理 --
假设：系统中存在有8条电路，每条电路都有高电平 与 低电平两种状态；
推理：系统能够表示 256种信号；
表示方式：[0, 255]

同理，如果是32条电路的话，则：系统能够表示的最大数字 = 2^32 - 1 = 4,294,967,295
日常生活中所说的32位机器，就能够同时处理 字长为32为的电路信号。

-- 使用二进制 来 表示十进制中的负数 --
手段：把现有的8位数中的第一个数值作为符号位（不参与数值表示） - 0表示整数，1表示负数；
推论：8条电路的最大值位 127，能够表示的数值范围是 -128~127;
结论：计算机中二进制整数 最终都是 用补码的方式来表示的；

规定：
正数的原码、反码与补码都是一样的；
而负数的补码 = 其反码 + 1；

为什么要这样规定？
答：这样的话，减法运算 就能够通过加法器来实现了。

运算示例：略
由于加减法属于高频运算，因此两个操作共用一个运算器，能够减少中间变量存储的开销。

-- 计算结果可能的“溢出” --
如果计算结果需要使用9条电路才能表示，则：使用8条电路表示计算结果时，就会发生溢出。
fact：在各种编程语言中，都规定了不同类型的数字的数值范围（最大值、最小值）；

-- 硬件 与 二进制的映射 --
一条电路 <-> 计算机中的1个bit；

计算机中的存储计量单位：
1 Byte = 8 bits;
1 KB = 1024 B;
1 MB = 1024 KB;
1 GB = 1024 MB;

-- 位移运算 --
xxx







