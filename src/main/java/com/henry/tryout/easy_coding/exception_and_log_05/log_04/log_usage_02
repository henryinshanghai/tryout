日志的正确用法：
1 开发者需要先预判 日志的级别(代码层面)；
    对于 debug或者info级别的日志，必须使用条件输出 或者 使用占位符的方式打印。
    原因：
        #1 使用占位符的方式 能够避免 字符串拼接的操作；
        #2 如果 在应用中配置了 日志的打印级别为 warn，则：
            在代码中添加的 debug级别的日志就不会被打印。- 就只会白白地浪费系统资源

2 避免日志语句被重复打印(项目配置层面)；
    - 生产环境禁止输出 Debug级别的日志 & 有选择地输出 info级别的日志；
    控制 debug或者info级别的日志输出量，避免磁盘空间不足的问题。

    目标：避免日志重复输出；
    手段：在日志配置文件中添加 additivity=false???

3 正确的使用日志级别(代码层面)；
    fact:
        1 对于user输入参数错误的场景，记录日志 是为了 在user咨询时可以还原现场；
        2 error级别的日志表明：需要人为介入(设计初衷) - 所以(用法)Error级别只记录 系统逻辑错误、异常或者违反重要的业务规则；
    其他的情况都可以归为 Warn级别。

4 保证日志记录足够多的内容(代码层面)
    - #1 现场的上下文信息；
    - #2 异常堆栈信息；logger.error("xxx"+e.getMessage, e)
    好的做法：如果在日志中输出了对象实例，一定要确保对象重写了toString()方法。否则打印hashCode结果，没有意义

wrap up:
使用好日志的几个实践：
#1 代码层面：使用正确的日志级别; 使用占位符方式编码; 日志message中包含方法名与关键对象;
#2 项目配置层面：添加additivity的配置 来 避免日志被重复打印???