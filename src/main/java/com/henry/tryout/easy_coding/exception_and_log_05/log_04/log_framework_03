日志框架的相关名词：
    log4j、logback、jdk-logging、slf4j、commons-logging

日志框架的分类(FAL)：
    1 日志门面(facet)；
    2 日志适配器(adapter)；
    3 日志库(library)；

日志门面(Facet)：
- 设计模式之门面设计模式
    作用：门面本身提供了一套接口规范；
    特征：
        1 门面自身 不负责 日志功能的实现；
        2 门面的使用者 不需要关注 底层具体是用哪一个日志库来实现日志打印的;
        3 日志框架  使用了门面模式。
    常见的日志门面：
        #1 slf4j；
        #2 commons-logging.

---
日志库(Library)
    作用：具体实现了日志相关的功能；
    常见的日志库：log4j、log-jdk、logback；
    特征：
        1 log4j是最早诞生的日志库 - 相比于JDK中的库，它相当于第三方库；
        2 随后JDK1.4中也引入了一个日志库 log-jdk; // 有了两种日志库之后，开发者在编码时，就需要关注自己引入的日志库的细节了
        3 最后出现的是 logback，它和log4j是同一个作者，并且实现了 slf4j门面的所规定的接口。

---
日志适配器(Adapter)
分类：
    1 用于适配日志门面(Facet) 的适配器；
        原因：slf4j规范提出的时间比较晚，先前的日志库（log4j）没有实现slf4j所规定的接口。
        所以，如果想要在项目中使用 slf4j + log4j(门面 + 库)的组合，则：
            就会需要一个适配器 来解决接口不兼容的问题 - slf4j-log4j2

    2 用于适配日志库(Library) 的适配器；
        背景：在老项目中，代码直接使用了某个具体日志库的API。现在想要在项目中 改为使用 门面模式(slf4j + logback),怎么办？
        手段1：直接改动代码 - 特征：工作量很大，而且难保不会遗漏。
        手段2：使用一个适配器，把 对旧日志库的API调用 路由到 slf4j。
        特征：
            1 在不改动原有代码的情况下，也能够使用slf4j来统一管理日志；
            2 后面如果想要替换日志库的话，也会非常简单。

wrap up:
在项目中使用日志的方式：
#1 直接引入一个日志库，然后调用日志库的API；
#2 先引入门面, 在引入实现了门面的日志库;
#3 对于已经使用log4j的项目，如果想要改用 门面的方式使用日志，则：添加门面适配器；
