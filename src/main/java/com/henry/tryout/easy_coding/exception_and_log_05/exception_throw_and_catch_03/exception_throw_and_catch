异常的处理原则：
    1 抛出的异常 与 捕获到的异常应该是完全匹配的；
    2 或者 捕获的异常是 被抛出异常的父类。

怎么传递异常信息？
手段1：抛出异常对象；
手段2：把 异常信息 转成 信号量，然后封装在特定的对象中。
推荐做法：
    如果是对外提供的开放接口，则：使用错误码的方式；
    如果是公司内部跨应用的远程服务，则：使用 Result对象来封装错误码、错误描述信息；
    如果是应用内部，则：直接抛出异常。

分析：
#1 为什么远程服务调用时，要使用Result对象封装异常信息？
答：
    1 如果是用抛出异常的方式，万一调用方没有对异常进行捕获，则：会产生运行时错误，导致程序中断。
    2 如果在抛出的异常对象中没有添加栈的信息，对于调用端解决问题没什么帮助；
    3 而如果添加了栈信息，频繁出错时，信息的序列化与传输 也可能会有性能损耗问题。

---------
NPE的规范

避免NPE；
手段1：提供方可以返回null值，而调用方使用前必须进行非空判断；
手段2：服务方保证不会返回null值，而是返回 Optional、空对象、空集合，调用方不做任何处理。
这是 契约式编程 与 防御式编程的斗争：
    防御式编程胜利 - 防止NPE一定是调用方的责任，需要调用方在使用前进行判断。
