记录日志的作用 & 衍生作用：
    1 记录操作的轨迹；- 进而数据化地分析用户偏好，为用户提供个人化的服务
    2 监控系统运行状态； - 工程师进而可以及时地得到预警，避免故障发生
    3 回溯系统故障。 - 工程师进而可以快速定位到问题。

---
日志规范

1 统一的日志文件命名；
推荐的命名方式 - <appName>_<logType>_logName.log
    loyType为日志类型，一般的分类有：stats、monitor、visit；
    logName为日志描述。
有了好的命名后，就能够见名知意 - 见到文件的名字就能够知晓
日志属于什么应用？日志的类型、日志的目的。
demo： mppserver应用中，用于监控时区转换异常的日志文件名 应该命名为: mppserver_monitor_timeZoneConvert.log

2 日志文件应该保存多久？
推荐时长为15天，可以根据 日志文件的重要程度自行调整。

根据重要程度，日志被分成了如下的几个级别（重要性从低到高）：
- Debug级别；
    记录 对调试程序有用的信息；
- Info级别；
    记录程序的运行现场，对于排查定位问题有指导意义；
- Warn级别；
    记录程序的运行现场，但偏向于表明 此处有出现错误的可能；
- Error级别；
    表明当前程序的运行发生了错误，需要被关注 - 但此时的错误不会影响系统的继续运行
- Fatal级别；
    表明当前程序运行出现了严重的错误事件，并且会导致应用中断。

======
关于日志的其他推荐做法：
1 开发者需要先预判 日志的级别；
对于 debug或者info级别的日志，必须使用条件输出 或者 使用占位符的方式打印。

注：如果 在应用中配置了日志的打印级别为 warn，那么在代码中添加的 debug级别的日志就不会被打印。
只会白白地浪费系统资源

2 避免无效的日志打印语句
- 生产环境禁止输出 Debug级别的日志 & 有选择地输出 info级别的日志；
控制 debug或者info级别的日志输出量，避免磁盘空间不足的问题。
避免日志重复输出？？？
手段：在日志配置文件中添加 additivity=false

3 正确的使用日志级别
对于user输入参数错误的场景，记录日志 是为了在user咨询时可以还原现场；
error级别的日志表明：需要人为介入。
所以，Error级别只记录 系统逻辑错误、异常或者违反重要的业务规则；
其他的情况都可以归为 Warn级别。

4 保证日志记录足够多的内容
    - 现场的上下文信息；
    - 异常堆栈信息；logger.error("xxx"+e.getMessage, e)
    好的做法：如果在日志中输出了对象实例，一定要确保对象重写了toString()方法。否则打印hashCode结果，没有意义



