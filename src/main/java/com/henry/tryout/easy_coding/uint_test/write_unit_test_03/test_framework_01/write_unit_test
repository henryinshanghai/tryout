Junit测试框架

Java世界的测试框架：Junit, TestNG

Junit:
早期作者： Kent Beck & Erich Gamma.
第一版： 1997年；
2017.09 Junit5.0稳定版本
特征：
    Junit5对JDK8及更新的版本提供了更好的支持 -
        1 比如对lambda表达式的支持
        2 更多的测试形式 - 重复测试、参数化测试等

Junit5的3个主要模块：
#1 JUnit Platform:
    作用：用于在JVM上 启动测试框架；
    特征：在命令行、Gradle、Maven上，执行测试的入口是一样的。
#2 Junit Jupiter:
    作用：包含有 JUnit5.0所提供的全新的编程模型 与 扩展机制。
#3 JUnit Vintage:
    作用：兼容运行 JUnit3与JUnit4的测试用例。

用法：为了使开发者能够专注于编写测试，而不用关心测试的执行流程、结果展示这些东西，JUnit提供了一些辅助测试的注解👇
@Test - 声明这是一个测试方法
@ParameterizedTest - 声明这是一个测试方法，并且 支持传入不同的入参，使当前方法运行多次
@BeforeEach - 作用类似于JUnit4中的@Before, 在每个测试方法运行之前 都运行一个指定的方法
@BeforeAll - 在每个测试类运行之前，都执行一个指定的方法
@Disabled - 声明测试方法不再运行
@Tag - 为方法添加分组标签，以便选择性地执行分组

代码Demo: TicketSellerTest

======
当测试用例比较多的时候，为了能够更好地组织测试的结构 - 可以使用JUnit的@Nested注解
作用：表达 有层次关系的测试用例；
代码Demo： TransactionServiceTest
特征：
    1 Junit本身没有限制嵌套的层级数量 - 但是一般不要超过3级嵌套，否则测试用例代码会很难看懂

======
单元测试中的其他技巧：
1 分组测试；
2 数据驱动测试。

分组测试：
    对不同特性的单元测试进行分组 - 抽象来说，实现测试在运行频率 维度上的分层。
    demo：
        1 把所有单元测试用例 分为：
            执行很快且重要的冒烟测试用例、
            执行很慢且比较重要的日常测试用例、
            数量很多但是不太重要的回归测试用例。
            手段：@Tag注解。
        2 根据某个维度进行分组后，就能够 - 在不同的场景下选择性地执行 对应分组的测试用例。
            手段：在Maven中配置 maven-surefire-plugin
            如果使用的管理工具是 Gradle，Gradle也提供了专用的配置项 来 支持选择执行分组
            参考：<artifactId>maven-surefire-plugin</artifactId>
    示例代码： TicketSellerTest_03
    怎么验证分组是已经生效了的呢？母鸡~

======
数据驱动测试
使用场景： 计算密集类型的算法单元；
特征：
    1 计算单元的内部逻辑复杂；
    2 对于不同的输入，会得到截然不同的输出。
        - 如果使用传统的方式编写单测，会需要 重复编写大量模板是的数据准备 与 方法调用代码。才能cover到所有的测试场景
    怎么办？
    思路：把数据的输入和输出 与 测试逻辑分开 - 这样测试代码只需要写一段，就能够针对各种不同的输入进行验证。
    手段：@TestFactory
    代码 Demo: ExchangeRateConverterTest_04