单元测试。
特征：
    1 是一种白盒测试 - 也就是在测试的时候，对被测试的东西是了解的；
    2 测试者 根据程序的内部结构 来测试代码。

单元测试覆盖率：
    是：一个比率。
    作用：用来描述 业务代码被单元测试 所测试的比例与程度；
    应用：衡量单元测试的好坏；
    特征：
        覆盖率可以分成好几个类别。
        - 粗粒度的覆盖率（两种）；
            1 类覆盖；
                只要类中存在有 方法或者变量 被测试用例所调用或者执行到，那么：这个类就已经被测试覆盖了。
            2 方法覆盖；
                只要 测试用例执行过程中，某个方法被调用到了(不管方法中有多少行代码被执行到了)，那么：这个方法就被测试覆盖了。
            特征：
                粒度比较粗,所以 即便这两种覆盖率都到达了100%,也不能说明测试用例就写得很好。
        - 细粒度的覆盖（5种）；
            1 行覆盖；aka 语句覆盖
            作用：用来度量 可执行的语句是不是有被执行到。
            分子 = 真实执行到的语句的行数； 分母：所有可执行语句的行数；
            Demo: CoverageSampleMethods

            2 分支覆盖；Branch Coverage
            作用：用于度量程序中每一个判定分支 是不是都有被执行到。
            分子 = 代码中被执行到的分支数量； 分母 = 代码中所有分支的总数。
            (a==1 && b==2 || c==3)整体作为一个判定, aka, 测试数据 需要能够cover 此判定为true 或者为false的两种场景。
            对应的测试用例：testLineCoverageSample()

            3 条件判定覆盖； Condition Decision Coverage
            它要求设计足够多的测试用例；目的是：
                #1 使判定中的 每个条件的所有可能情况 都至少被执行一次；
                #2 使判定本身的所有可能结果 也至少被执行一次。
            (a==1 && b==2 || c==3)这个判定中，包含了3个条件： a==1, b==2, c==3
            对应的测试用例：
                testConditionDecisionCoverageTrue
                testConditionDecisionCoverageFalse

            4 条件组合覆盖
                所有条件的组合都要求出现至少一次 - 如果条件是N个的话，那么入参情况就需要2^n个，
                工作量太大
                满足条件组合覆盖的测试用例demo:xxx

            5 路径覆盖
                (a==1 && b==2 || c==3)
                条件有3个、组合有8种、而路径有5种：
                    a==1, b==2; a==1, b!=2, c==3; a==1, b!=2, c!=3; a!=1, c==3; a!=1, c!=3
                    因为操作符的短路特性, 路径并不需要cover所有的组合。
                满足路径覆盖的测试用例demo：xxx
