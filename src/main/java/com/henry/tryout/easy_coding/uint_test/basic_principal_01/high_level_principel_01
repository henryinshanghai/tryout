宏观规则：AIR

新增的代码应该同步添加测试用例。
修改代码逻辑时，也应该同步保证 测试用例成功执行。
AIR：
    - 自动化；
    - 独立性；
    - 可重复性。

自动化：
    1 执行地自动化；   // 这样才能方便地在 CI中添加自动化测试的步骤
    2 执行结果验证的自动化； // 这样才能保证代码本身的正确性
单元测试中不允许使用 System.out,而应该使用 断言来验证结果

独立性：
    是：
        1 用例之间不允许相互调用；
        2 用例之间不允许出现执行次序的先后依赖。
    作用：使单元测试 稳定可靠且能够维护；
    如果 testMethod02 会调用 testMethod01,则：
        1 执行 testMethod02时，testMethod01会被再次执行；
        2 testMethod01如果验证失败，会导致 testMethod02也跟着失败。

fact：主流的测试框架中， Junit的用例执行顺序就是无序的。
而 TestNG则支持测试用例的顺序执行。

可重复性：
    是：单元测试可以重复执行，不应该受到外部环境的影响。
    应用：单元测试 通常会被添加到持续集成中 - 因此 每次有代码提交时，单元测试都会被触发执行。
    所以，如果单元测试存在有对外部的依赖(比如网络、可用的服务、中间件等)，则：很有可能导致 持续集成的机制不可用
