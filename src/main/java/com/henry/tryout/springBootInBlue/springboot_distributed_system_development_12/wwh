微服务：
    1 使用小的独立组件来 做好一件事；
    2 小的组件需要谨慎定义好它的功能边界；
VS：传统的单块式结构；

---
单块式结构应用：
特征：
    1 部署与伸缩都是 以单个单元作为单位进行的；
    2 易于部署；
    3 可用性低；
    4 可伸缩性差；
    5 集中发布的声明周期；
    6 违反单一功能原则；

微服务结构的应用：
特征：
    1 使用单个独立的服务来实现某一个业务功能；
    2 需要把功能按照业务 按照边界拆分成为单个服务；
    3 需要解决 分布存在的服务、机器 之间的通信问题。

---
Spring Cloud：
作用：解决 分布式开发中的一些通用问题；
特征：
    1 基于Spring Boot；
    2 提供的功能：
        - 配置管理；
        - 服务发现；
        - 断路器；
        - 代理服务...
    3 开发出的应用(叫做“原生云应用”) 适合于 在Docker或者PaaS平台上进行部署；

---
Spring Cloud快速入门【分布式系统的通用需求】：
- Ⅰ 配置服务；
作用：
    1 为 分布式系统中的各个微服务 提供 外部化配置的功能。
    2 用于存储 所有应用(微服务)的配置文件。
特征：
    1 支持在git 或者 在文件系统中，放置配置文件；
    2 使用不同格式的文件 来 区分不同应用的配置文件；
        /{application}/{profile}[/{label}]
        /{application}-{profile}.yml
        /{application}={profile}.properties
    3 Spring Cloud提供了一个注解，用来在微服务上启用 配置服务 - @EnableConfigServer

- Ⅱ 服务发现；
作用：使各个服务能够知道 当前系统中有哪些可用的其他服务；
实现手段：Netflix OSS的Eureka；
用法：
    1 把所有的微服务 都添加成为 Eureka Client；
    2 把 Eureka Server作为 微服务注册中心；
特征：
    1 Spring Cloud使用注解的方式 来 提供了Eureka的客户端+服务端 - @EnableEurekaServer & @EnableEurekaClient

- Ⅲ 路由网关；
作用：
    1 支持实现 所有的微服务对外都暴露相同的接口/域名；
应用：
    - 这样用户只需要访问一个网址，网关会把用户的请求 代理到不同的服务中去。
实现手段：Zuul；
特征：
    1 能够把请求自动路由到 注册在Eureka Server上的服务；
    2 Spring Cloud使用注解的方式 来 启用路由代理 - @EnableZuulProxy。

- Ⅳ 负载均衡
作用：当使用节点集群 来 分担请求压力时，负载均衡能够保证请求按照某种策略被分配到 集群中不同的节点上。
实现手段：
    1 客户端的负载均衡 - Ribbon 与 Feign；
    Ribbon用法：
        直接在Spring容器中注入一个 RestTemplate对象即可。
    特征：
        这里的restTemplate对象 就已经做好了负载均衡的配置。

    Feign的用法：
        1 在自定义接口上添加 @FeignClient注解 来 发送REST API请求；
        2 在Controller方法中，使用 接口类型的对象 来 调用API请求。
    特征：
        这里对外部API请求的调用 也是做好了负载均衡的。

- Ⅴ 断路器
作用：当分布式系统中出现错误时，断路器能够启用备用方法 来 替代失败的方法。
应用：
    1 使分布式系统拥有了 容错的能力。
    2 放置分布式系统中可能出现的 级联错误。
用法：
    1 启用断路器支持 - 使用@EnableCircuitBreaker注解；
    2 指定方法失败时的备用方法 - @HystrixCommand注解的 fallbackMethod属性；
特征：
    Spring Cloud提供了一个控制台 - 用来监控断路器的运行情况；
    开启手段：@EnableHystrixDashboard注解

实战：
    drill_springcloud_distribution_system
























