系统集成Spring Integration
是：Spring框架中的一个模块；
作用：支持不同系统之间的交互；
特征：
    1 是EIP(企业集成模式)的一个具体实现；
    2 它的基础是Spring的其他模块；
    3 它能够实现不同系统之间交互的松耦合；
原理：交互 由 异步消息 来驱动；
抽象用法：Java配置、注解、Spring Integration Java DSL(领域专用语言)
抽象概念( -> 具体类型/接口)：
    1 Message；
    作用：用于在不同的部分之间传递；
    特征：
        1 组成 = 消息头header + 消息体body;
        2 消息头header中的数据，用于解释消息体中的内容；
        3 消息体中可以是任意类型的数据 - XML、Json、Java对象


    2 Channel；
    作用：作为消息的驿站 - sender把消息发送到Channel、receiver从Channel中取出消息。
    具体类型/接口：MessageChannel
    更有用的子接口：
        - PollableChannel：接收者能够轮询获取消息
        - SubscribableChannel：消息能够一并发送给所有的订阅者


    开发者会用到的通道：
    - PublishSubscribeChannel: 发布者能够广播消息给所有的订阅者；
    - QueueChannel：消息接收者能够轮询获取消息
    - PriorityChannel：能够按照优先级来存储消息
    - RendezvousChannel: 确保 每个接收者都会 在接受到消息后，再去发送消息
    - DirectChannel: 能够把消息发送到 某一个订阅者； // 注：这是Spring Integration默认使用的消息通道
    - ExecutorChannel: 能够绑定一个 task executor(多线程)

    小伙伴：通道拦截器
    作用：拦截 发送消息到通道、从通道中取出消息的操作。
    基础：ChannelInterceptor接口；
    用法：
        1 实现了上述接口，就定义了一个 通道拦截器；
        2 为所有的channel添加拦截器 - channel.addInterceptor(<interceptor>)


    3 Message EndPoint
    作用：
        1 真正地对消息进行处理；
        2 控制通道的路由(aka 发送到哪一个通道中)
    具体类型/接口：
        - 通道适配器；
        - 消息网关；
        - 服务激活器；
        - 路由器；
        - 过滤器；
        - 拆分器；
        - 聚合器；
        - 增强器；
        - 转换器；
        - 连接桥；

===
Spring Integration Java DSL
card: Spring Integration中，提供了 Integration Flow。用来帮助开发者 定义系统集成的流程？？？
任务：定义系统集成流程？？？
手段：使用FluentAPI 来 定义流程；
具体用法：IntegrationFlows + IntegrationFlowBuilder
规则：FluentAPI 到 Spring Integration端点的规则；
    transform() -> Transformer
    filter() -> Filter
    ...
    bridge() -> Bridge
使用FluentAPI 来 定义流程的示例：
    @Bean
    public IntegrationFlow demoFlow() {
        return IntegrationFlow.from("input") // 从Channel Input中获取消息
            .<String, Integer>transform(Integer::parseInt) // 把消息转化成为整数
            .get(); // 获取集成流程。并注册成为Bean
    }


===
Action：
    参考： drill_enterprise_integration
    讲真，上面的知识储备 对action没有任何帮助。action本身也没能照本宣科地成功😭