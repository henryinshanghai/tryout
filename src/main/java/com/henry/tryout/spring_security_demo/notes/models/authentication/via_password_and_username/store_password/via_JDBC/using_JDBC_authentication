#1 Spring Security的 JdbcDaoImpl 实现了 UserDetailsService 来 支持 使用JDBC检索的基于用户名和密码的身份验证。
#2 JdbcUserDetailsManager 扩展了 JdbcDaoImpl， 通过 UserDetailsManager 接口 来 提供对用户详细信息的管理。

    模型：
    #1 UserDetailsService（接口）：用来 加载用户具体的数据.
    #2 UserDetailsManager（接口）：#1的一个扩展， 能够创建新的user & 更新已经存在的user

当Spring Security 被配置为 接受用户名/密码进行身份验证 时，它将使用 基于 UserDetails 的身份验证。

Spring Security JDBC认证默认所使用的 schema:
Security为 基于JDBC的认证 提供了默认的查询。
接下来的部分提供了 默认的查询 对应所使用的默认的schema。
你需要适当调整 schema 来 匹配 你对查询的自定义 或者 你所使用的数据库方言。

User schema：
JdbcDaoImpl 需要 具体的数据表 来 加载密码、账号状态（启用或禁用）以及 user的一堆权限（角色）

note：默认的schema 也会通过 classpath source的形式暴露给开发者 - org/springframework/security/core/userdetails/jdbc/users.ddl

--- SQL#01 默认的User schema ---
    create table users(
        username varchar_ignorecase(50) not null primary key,
        password varchar_ignorecase(500) not null,
        enabled boolean not null
    );

    create table authorities (
        username varchar_ignorecase(50) not null,
        authority varchar_ignorecase(50) not null,
        constraint fk_authorities_users foreign key(username) references users(username)
    );
    create unique index ix_auth_username on authorities (username,authority);
    索引、约束的使用规则：参考 com.henry.tryout.sql_drill.concept_00

--- 为 Oracle数据库 准备的默认 User Schema ---
略

--- 如果应用中使用到了 group（？），则：需要提供 group schema ---
    create table groups ( // 组名
        id bigint generated by default as identity(start with 0) primary key,
        group_name varchar_ignorecase(50) not null
    );

    create table group_authorities ( // 当前组所拥有的权限
        group_id bigint not null,
        authority varchar(50) not null,
        constraint fk_group_authorities_group foreign key(group_id) references groups(id)
    );

    create table group_members ( // 组中的member成员
        id bigint generated by default as identity(start with 0) primary key,
        username varchar(50) not null,
        group_id bigint not null,
        constraint fk_group_members_group foreign key(group_id) references groups(id)
    );

===
设置数据源

在对 JdbcUserDetailsManager 进行配置之前，开发者需要创建一个 DataSource。
这里，我们设置一个 使用默认user schema来初始化的 内嵌数据库(HSQL, H2等)

---
为什么使用内嵌的数据库？
在开发阶段，内嵌的数据库会非常有用 - 因为它的轻量特性
所以 不管是配置，还是 启动时间、可测试性以及 在开发阶段 快速改进你的SQL都会更加容易。
---

--- 内嵌的数据源 ---
    @Bean
    DataSource dataSource() {
        return new EmbeddedDatabaseBuilder()
            .setType(H2)
            .addScript(JdbcDaoImpl.DEFAULT_USER_SCHEMA_DDL_LOCATION)
            .build();
    }

--- JdbcUserDetailsManager 的Bean实例 ---
这里我们使用 Spring Boot CLI 来 对密码进行编码，并获取编码后的密码。
    @Bean
    UserDetailsManager users(DataSource dataSource) {
    	UserDetails user = User.builder()
    		.username("user")
    		.password("{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW")
    		.roles("USER")
    		.build();

    	UserDetails admin = User.builder()
    		.username("admin")
    		.password("{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW")
    		.roles("USER", "ADMIN")
    		.build();

    	JdbcUserDetailsManager users = new JdbcUserDetailsManager(dataSource);
    	users.createUser(user);
    	users.createUser(admin);
    	return users;
    }

