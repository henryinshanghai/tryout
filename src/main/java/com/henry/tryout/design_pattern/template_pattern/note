模板模式；

用法：
    #1 在超类中定义一个方法的框架/模板；
    #2 允许子类在不修改结构的情况下，重写算法的特定步骤；
特征：
    #1 客户端的代码，仍旧会使用抽象类中定义的方法；
    #2 属于 行为设计模式；

需求场景：开发一个分析文档的程序；
用户能够上传各种形式的文档(doc, pdf, csv等)，程序执行固定的处理流程后，返回统一的格式给用户。

#设计1：
Doc -> DocDataMiner
Csv -> CSVDataMiner
Pdf -> PDFDataMiner

特征：由于每一种类型的文件，处理流程都是相同的。所以上面的设计会存在大量重复代码

#2 设计2 - 模板方法模式
具体步骤：
    #1 把算法分解成为一系列的步骤；
    #2 把分解得到的步骤，编写成为一个个独立的方法；
    #3 在"模板方法"中，使用#2中的方法 来 实现算法；
特征：
    #1 步骤可以是抽象的，也可以有默认的实现；
    #2 客户端需要自行提供子类，并在子类中实现 所有的抽象步骤；
    #3 如果有必要，可以在子类中重写一些步骤（但不能重写模板方法本身）；
设计图：
DataMiner
+ mine(path) -> {openFile, extractData, parseData, analyzeData(有默认实现), sendReport(有默认实现), closeFile}

PDFDataMiner
+ openFile
+ ...
+ closeFile // 与PDF有关的重写

重申：
#1 抽象步骤需要在各个子类中实现；
#2 有些步骤在父类中有默认实现，但在子类中仍旧可以选择重写。

拓展：钩子步骤；
是：可选步骤；
特征：
    #1 步骤的内容为空；
    #2 即便重写钩子，模板方法也能够工作；
    #3 钩子通常放置在算法重要步骤的前后，从而为子类提供额外的扩展点；

======
模板模式中的模型：

#1 抽象类：
作用：在其中声明表示算法本身的方法 & 表示各个步骤的方法；

#2 具体类；
特征：可以重写所有步骤，但不能重写模板方法自身；

代码demo: ClientCodeUsingTemplateMethod

======
模板模式的适用场景：
#1 当希望客户端能够扩展“某个特定的算法步骤”(而不是整个算法)时，可以使用；
#2 当多个类的算法步骤高度相似，如果想要去除重复代码时，可以使用；
    代价：如果算法步骤发生了变化，则：可能会需要修改所有的类。

===
优缺点：

优点：
#1 稳定的部分放在父类中，易变的部分放在子类中 - 根据需求的变动频率做了很好的分隔；
#2 代码在父类中高度集中 - 这样，能方便开发者对其进行维护；
#3 算法行为由父类控制，具体实现由子类提供 - 对于客户端来说，其编写的代码不会轻易发生变化。

缺点：
#1 类的数量比较多，因为所有独有的实现中都没有使用if/else(不同的分支分散在多个子类中)；
#2 如果模板方法中的步骤比较多的话，则：模板方法的维护会很困难；
#3 可能会违反Liskov替换原则 - 子类应该能够在client代码中完全替换父类；
