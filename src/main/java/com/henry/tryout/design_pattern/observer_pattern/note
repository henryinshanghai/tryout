观察者模式 Observer Pattern

作用：实现对象之间的一种 通知/订阅机制。
原理：在对象A上发生特定的事件时，会通知 所有“观察”对象A的其他对象，进行再执行相应的动作。
别名： 事件订阅者、监听者；
是：行为设计模式；
比喻：众星拱月。

===
问题

淘宝商家的到货通知：
商品上线/有供应后，能够通知到 关注此商品的所有消费者

手段1：商家在产品到货后，给 订阅者发送邮件或短信；
    特征：消息可能会被消费者忽略
手段2：观察者模式；

做法（和 京东的降价通知功能 如出一辙）：
    #1 开发者 把 值得关注其状态的对象，设计成为 一个目标；
    #2 设计一个 发布者的角色，用来 发布“目标状态发送变化”的通知；
    #3 设计一个 订阅者的角色，用来 表示“我期望关注 目标的状态变化”。
    #4 为发布者 添加订阅机制（商铺的订阅功能），使得 每个对象都能够 订阅/取消订阅 发布者相关事件。
具体做法：
    #1 开发者需要定义一个 用于存储订阅者引用（列表）的 成员变量；
    #2 开发者 定义几个 用于添加或者删除 #1中列表中订阅者的公共方法；
    #3 当发生重要的发布者事件时，需要能够 遍历所有的订阅者并调用 订阅者所提供的通知方法。

注意事项：
    #1 实际应用时，可能会有很多个订阅者 在跟踪 同一个发布者类的事件。
        为了统一调用方式，所有的订阅者都需要实现相同的接口 - 发布者只需要通过此接口与订阅者交互。
    #2 实际应用时，可能会存在多个不同类型的发布者。
        如果开发者希望 订阅者能够兼容所有的发布者，则：可以让订阅者都遵循同样的接口（不是和#1一样吗？）

===
模式结构：

#1 发布者 Publisher：用于 向其他对象发送 “值得关注的事件”；
    特征：
        #1 事件会在 发布者自身的状态发生变化时 或者 执行了特定的动作后 发生；
        #2 发布者一般会提供一个 “订阅”&“取消订阅”的接口；
#2 调用通知方法：用于 向订阅者发送通知；
    特征：这个方法是在 订阅者的接口中声明的；
#3 订阅者（Subscriber）：用于接收发布者所发出的通知；
    特征：一般只会有一个 update()方法 - 用来接收通知
#4 具体订阅者：用于接收发布者所发出的通知，并做出自己的响应。
    特征：所有的具体订阅者都需要实现相同的接口 - 这样发布者就不需要与具体的订阅者耦合
#5 上下文参数：用于表示 与事件相关的具体信息；
    特征：发布者 与 订阅者之间，一般会通过 上下文参数 来 传递信息。
#6 客户端：创建发布者与订阅者，并 为订阅者 来 注册发布者更新。


===
代码实现 - 参考：ClientUsingObserverPattern

===
适用场景：
#1 如果对象A的状态发生变化时，需要其他的对象{B， C， D}也跟着一起改变，则：
    可以使用 观察者模式
#2 如果对象A的状态发生变化时，会导致 很多其他的对象（具体多少个不清楚）随之发生变化，则：
    可以使用 观察者模式 来 降低对象之间的耦合
#3 如果 对象A的状态发生变化时，需要通知给其他的对象（但可能不知道具体是谁），则：
    可以使用 观察者模式

===
优缺点：
优点：
#1 符合开闭原则 - 开发者能够在不修改发布者代码的情况下，就引入新的订阅者类；
#2 开发者能够 “在运行时建立对象之间的联系”；
#3 观察者 与 被观察者之间的耦合 是抽象的；
#4 开发者可以在 生产者 与 消费者 之间，建立一套触发机制。

缺点：
订阅者的通知顺序是随机的，没有固定顺序

