装饰器模式 - Decorator Pattern / Wrapper Pattern

是：结构型模式；
作用：向既有对象 添加新的能力，而又不改变它的结构。
做法：把对象放进 包含特定行为的“特殊封装对象”中， 来 为原始对象绑定新的行为。
特征：
    #1 使用装饰器模式，开发者能够动态地 给一个对象添加额外的职责；
类比：俄罗斯套娃；

===
问题：开发一个提供 通知功能的程序，其他程序可以使用它 来 向用户发送通知；
第一版实现（基于通知器 Notifier类）：
    {几个成员变量，一个构造方法，一个send()发送方法}
    send()方法作用： 接收来自客户端的消息参数（消息内容 + 邮箱地址），然后把消息 发送到邮箱中
    特征：
        客户端的第三方程序 只会创建并配置 通知器对象 一次，并在有重要事件发生时进行调用；
    结构：
        通知库 <- 客户端程序

新需求：用户想要 在手机短信、微信、QQ等社交软件上 接收通知消息；
对需求的抽象：开发者 需要更改一个对象的行为；
手段1：使用子类继承的方式（extends） 来 扩展通知类；
    具体做法：在新的子类中 添加额外的通知方法；
    特征：每一种消息发送途径 就会需要一个新的子类；程序中的类会快速膨胀
    启发：继承可能导致的问题
        #1 继承是静态的。aka 开发者没办法在运行时，主动更改对象的行为。只能使用 子类对象 来 替换当前的整个对象
        #2 子类只能存在一个父类 - 多数编程语言不支持 继承自多个父类的行为
手段2：使用聚合/组合
    特征：当前类中，包含有多个 指向其他对象的引用（从而把工作委派给它们） - 这样当前类 就可以 使用多个类的行为；

-- 聚合 与 组合--
聚合：对象A 包含有 对象B， 但对象B可以独立于对象A而存在；
组合：对象A 由对象B构成； A会负责管理B的声明周期，B无法独立于A而存在

装饰器模式 就使用了组合的思路。
别名：包装器、封装器；
特征：
    #1 装饰器类 与 其所封装的对象 实现了相同的接口（协议）；
    #2 装饰器类 会把接收到的请求 委派给 具体的目标对象 进行处理；- 在委派的前后，封装器 能够对请求进行额外处理
    #3 装饰器 可以嵌套多个 - 开发者因此可以自由地组合 想要添加的新能力；

具体到上述需求，开发者可以：
把简单的邮件通知行为 放在 基类通知器中，然后 把其他通知方法 放到装饰器中。

客户端代码：
    把 基础通知器 放进到 一系列开发者所需要的装饰器中。对象会形成一个类似于栈的结构。
特征：
    由于装饰器类 实现了 与通知基类相同的接口，因此 客户端开发者 可以无差别地使用/替换它们。

===
装饰模式的结构：

#1 组件（Component）：用于 声明 装饰器类 与 被封装的原始对象 所需要实现的公共接口；
#2 具体组件：用于 声明 被封装的原始对象 的类型；
    特征：类型中定了 对象的基础行为（用装饰器 可以改变这个行为）；
#3 基础装饰器：用于 封装原始对象；
    特征：持有一个 指向被封装对象的成员变量（类型被声明为组件类型）
#4 具体装饰器：用于 定义可以添加到组件的额外行为。
#5 客户端：按照自己的需求，来 使用装饰器 动态装饰组件；

===
代码实现：
#1 开发者需要确保 业务逻辑能够使用 一个基础组件 + 多个额外的可选组件 来表示；
#2 归类出基础组件 与 可选组件之间的通用方法。并使用一个组件接口 来 声明这些个方法；
#3 定义一个具体组件类，并 声明其基础行为；
#4 定义装饰器基类； 用于 把具体工作委派给 被封装的对象
    特征：持有 被封装对象（成员变量 类型为接口类型）；
#5 开发者 确保所有的类都实现了 #2中定义的组件接口；
#6 把#4的装饰器基类，扩展成为 具体的装饰类；   用于增强原始对象
    特征：会在调用父类方法（父类方法会进行委托）之前/之后，来执行添加的行为；
#7 客户端代码：按照业务需求，动态地创建并组合装饰器。


===
代码实现：ClientUsingDecoratorPattern

===
适用场景：

#1 如果开发者希望能够不修改代码 就能使用对象，并且想要在运行时为对象添加额外的行为，则：
    可以使用装饰器模式
    原理：装饰器模式 会把业务逻辑 组织成为 层次结构。
    开发者因此 可以为各层都创建一个装饰器，然后在运行时 把各种逻辑组合起来。
    因此所有的对象 都实现了相同的接口，所以开发者可以 以相同的方式 来 使用各个对象（原始对象 & 装饰器对象）
#2 如果开发者使用继承的方式，会导致方案很难实施，则：
    可以考虑 装饰器模式

🐖 有些编程语言会使用 final关键字 来 限制对某一个类进行扩展，
这时候 复用此类的唯一方式 就是 使用装饰器来对它进行封装。

===
优缺点

优点：
#1 开发者不需要创建子类，就能够 扩展原始对象的行为；
#2 装饰器类 与 原始对象类 之间不会相互耦合，可以独立发展；
#3 开发者 能够在运行时 动态地添加/删除（aka 不需要改动代码） 对象的功能 ；
#4 开发者 能够自由地 组合装饰器所代表的各种能力；
#5 符合单一职责原则 - 装饰器类 从原始大类中，拆分出了 更小而具体的能力

缺点：
#1 引入了复杂度；
#2 从装饰器栈中，删除某一个装饰器 会比较困难；
#3 各层的初始化代码 看上去可能会很糟糕???





