好的命名（变量、方法、类）需要能够体现出代码在做的事情（业务意图），而不是代码的实现细节。
开发者 要学会用业务语言 来写代码；

如果if语句区分的只是参数，而不是一个具体的动作。则：
开发者可以把参数转化成为方法的局部变量，从而 - {#1 减少调用时的参数； #2 省掉客户端的if语句}；

方法是怎么变得越来越长的？
答：每次新需求，就添加一点代码；
写代码时的原则：让营地比你来的时候更干净。

如果一个参数仅仅用于 标记不同的路径，则：开发者应该去掉这样一个参数。
手段：直接定义多个函数；（Remove Flag Argument）

如果代码中出现了重复的 switch语句（说明很可能缺少了一个必要的模型），则：
开发者应该识别并定义出此缺失的模型，并利用多态特性 来 代替switch做选择。

当定义一个类的时候，开发者应该思考类需要提供什么样的行为 - 而不是无脑地生成一堆的getter/setter方法
对 setter()方法的重构手段：
    在类中添加一个方法用于修改setter()方法所修改的字段，并为此方法起一个 符合业务行为的名字（如 changePassword等）
