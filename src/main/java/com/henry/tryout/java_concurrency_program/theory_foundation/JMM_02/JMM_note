缓存 -> 可见性问题
编译优化 -> 有序性问题

JMM作用：
    规范了JVM怎样来提供 按需禁用 缓存与编译优化的方法；
JMM的具体实现：
    1 三个关键字 - volatile, synchronized, final;
    2 6项 happens-before规则；

------
volatile - 作用：禁用CPU缓存 以及 编译优化，从而 确保共享资源对所有线程的可见性；
代码demo：VolatileExample

------
6项 happens-before规则 - 对可见性的描述：

Happens-Before表达的是：前面一个操作的结果 对 后续操作 是可见的
    1.程序的顺序性规则，一个线程执行过程中，前面对某个变量的修改 对所有后继操作都是可见的
    2.volatile变量规则： 对一个volatile变量的写操作 对于 后续对这个volatile变量的读操作 可见； volatile变量, 先写后读
    3.传递性 A Happens-Before B, B Happens-Before C 那么: A Happens-Before C
    4.管程中锁的规则: 获得锁之后，线程A对共享变量的操作, 对 后来再获得锁的其他线程 来说是可见的
    5.线程start规则: 如果在线程A(主线程)中启动了线程B, 那么: 线程B 能够看到 线程A 在启动它之前的所有操作;
    6.线程join规则： 如果在线程A中 等待线程B完成（调用B的join方法），那么: 线程A 能够看到 线程B对共享变量的操作.

两个额外的规则：
    线程interrupt规则：对线程 interrupt()方法的调用 先行发生于 被中断线程的代码 检测到中断事件的发生 - 可以通过Thread.interrupted()方法检测到是否有中断发生。
    对象finalize规则：一个对象的初始化完成(构造函数执行结束)  先行发生于 它的finalize()方法的开始。
------
final - 声明变量是只读对象，编译器可以尽力优化它

逸出：
    逸出 指的是对封装性的破坏。
    比如对一个对象的操作，通过 将这个对象的this 赋值给一个外部全局变量，使得 - 这个全局变量可以 绕过对象的封装接口 直接访问对象中的成员，这就是逸出。
