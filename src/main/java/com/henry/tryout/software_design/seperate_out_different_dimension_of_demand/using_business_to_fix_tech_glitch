一个需求，可以从多个维度(dimension)/视角(perspective)来考察；

需求实例：
    #1 当前系统是一个 清结算系统(?);
    #2 上游系统会向当前系统发送消息；
    #3 当前系统发现#2中发送的消息可能会丢失...
解决手段： 在当前系统中设计了一个补偿机制；
原理：
    #1 推送过来的数据，最开始是由当前系统发出的；aka 当前系统本身就有这些数据的原始信息
    #2 开发人员在数据库中添加了一个状态，用来记录消息返回的具体情况 [#1 与 #2有什么关系吗？]
        如果发现消息丢失了，则：主动向上游系统发送请求，获取到需要的消息
这个补偿机制导致了一系列的后继问题：
    #1 当系统业务量增加的时候，则：
        数据库访问压力变大 -> 丢失数据的情况频发 -> 补偿机制的线程因此频繁访问数据库(找到丢失的数据 & 写回缺失的数据)
问题出在哪儿？
    考察需求/问题本身，上游系统向下游系统推送消息，这应该是一个通信层面的问题。
    而这里的补偿机制，由于数据库中存储了状态字段，导致这个问题被带到了业务层面。
recap：由于开发人员只考虑到了业务功能，忽视了其他维度。导致业务与技术被混到了一起
新的解决方案：
    通信层面的问题，就在通信层面来解决；
    具体手段：一个吞吐量更大的消息队列 - 这样问题在通信层面就解决了，也就不会影响到业务层面。

recap: 技术引发的问题，不要使用业务手段来解决 - 会引入更多的问题。