需求的分类
#1 功能性需求；
#2 非功能性需求；
    #1 执行质量(延迟、安全、吞吐等) - 能够在运行时检查
    #2 演化质量(可测试性、可维护性、可扩展性) - 隐含于软件的结构中

对需求分解之后(实现更容易实现),但是怎么能保证功能被成功实现了呢？
答：
    对分解出来的每个小的组件进行测试 - 如果小组件能够测试成功，则：有信心说完整的功能会正常工作
    相反地，如果没能(或者无法)做好小组件的测试，则：就只能依靠在页面上点点点来测试完整功能了

测试完整的功能 -> 测试每一个小组件 -> 保证每个小组件都是可测试的 - 在设计模块的时候，就要考虑组件的可测试性。
可测试的组件的特征：
    #1 能够尽量不依赖于集成环境执行；
    #2 能够搭建本地的集成测试环境，其他的周边系统可以使用模拟服务的方式代替

使用可测试性 来 考察现有的设计：
#1 单例模式；
    特征：私有的构造函数；
    评价：这导致类没办法被继承，也就没办法在测试时，使用子类对象模拟它 - 不好测试

#2 在service类中，持有repository作为成员变量 并使用new来初始化；
    评价：这种写法就要求测试时，真的创建数据库连接对象 - 但这不是测试的真实意图。
    有利于测试的写法：在service的构造方法中，把repository作为参数传入。
    只要参数化，就能够使用Mock框架来模拟对象 - 问：不参数化，就没办法模拟了吗？

Java开发的趋势 & 可测试性
从EJB -> Spring框架，可测试性正变得越来越好

recap：进行软件设计时，就需要考虑好 可测试性。
