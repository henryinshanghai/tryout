工具箱：
#1 程序设计语言；
#2 编程范式；
#3 设计原则与模式；
#4 设计方法/步骤；

设计方法1：
#1 先设计数据库；
#2 再设计 针对数据库进行CRUD操作的代码； // 这是结构化编程的思路

设计方法2：
#1 先设计出软件系统中的业务实体；
#2 为实体提供它们应该具有的行为；
#3 基于实体，向下存储数据，向上提供UI接口； // 本质上还是以数据为基础

随着软件越发复杂，上述的两种方式开始捉襟见肘。

对软件设计的更多探索 - 佼佼者：领域驱动设计； slogan: 为开发业务软件而生！

======
领域驱动设计 Domain Drive Design

---
历史：
#1 源起：《领域驱动设计》 Eric Evans
    目标：让业务人员参与到软件的设计过程中来；
    手段：
        #1 使用 对于开发人员 & 业务人员都通用的语言描述需求
        #2 提供了一套 标准的建模方法 - 用于快速地识别出系统中的业务模型
#2 发展： 微服务的兴起；
    微服务：???
    微服务的难点： 怎么能够有效地把一个系统拆分成为 多个微服务？
    DDD为这个难题提供了一个思路；

DDD = {#1 建立通用语言； #2 识别出”业务模型“}
通用语言：
    是：业务软件系统中的 业务概念 & 对这些业务概念的操作；
    作用：让业务人员 与 开发人员能够无障碍地沟通；
    衍生作用： 使得开发者能够把业务问题 作为自己思考的起点；
    示例：电商系统的通用语言；
        概念：{商品、订单}
        操作：{商品上架、下架、修改商品信息等} {用户下单、用户取消订单、用户修改订单}
    用法：由开发人员 与 业务人员一起创建出通用语言；
        工具：白板 + 便利贴 + 业务人员 + 开发人员；
        步骤：
            #1 识别出领域事件（过去式） - 业务系统中的重大节点(像是CA被submit to approval这样)
            #2 找出 引起领域事件的命令；
                产品上架 -> 上架命令
                用户下单 -> 下单命令
            #3 找出与事件/命令相关联的实体；
                订单、产品
        推荐实践：四色建模法

业务模型：在建立通用语言的过程中，就能够识别出 ”业务模型“。

===
在得到一堆的业务模型之后，剩下的工作就是 - 开发者需要把这些个模型组织起来；
但是要怎么进行组织呢？
答：战略设计 + 战术设计；

战略设计：
#1 把软件系统 按照业务领域的不同，拆分成为不同的子系统；
    示例：电商系统 = {订单域、产品域、支付域、物流域}
#2 把得到的一堆”业务模型“，按照业务领域，进行分组；
#3 分组之后，再来设计不同领域之间的交互。

战术设计：把业务模型给组织起来；
手段：
    #1 开发人员按照需要 来 实现业务模型 - 有些业务模型被编写为实体，有些业务模型被编写为 值对象；‘
    #2 考虑模型之间的关系 - 对于需要一起使用的模型，把它们设计成为一个聚合；
    #3 考虑模型的演变 - 参考DDD标准的设计概念：仓库、服务...

======
Recap:
#1 DDD的起点是业务；
#2 DDD的组成 = {通用语言 + 领域模型}
#3 DDD模型的设计 = {战略设计：按照领域对模型分组 + 战术设计：按照需要，组织起不同的模型}

