程序设计语言的实现 - 运行时
作用：
    #1 实现“程序设计语言的执行模型”；
    #2 支持代码的运行；
特征：
    #1 开发者即便不了解运行时，也不会影响写代码；
    #2 了解运行时之后，开发者的能力就能够超越语言本身。
实例：
    对于Java编程语言，JVM就是它的运行时。

======
学习运行时
作用：了解代码究竟是怎么运行起来的；
Java中代码运行的步骤：
    #1 一个符合特定规范的可执行文件；[对JVM来说就是 .class类文件]
    #2 使用类加载器 把可执行文件加载到(load)内存中；
        相关知识点： JVM内存布局 - com/henry/tryout/easy_coding/jvm_04
    #3 执行程序；
        #1 设置好程序计数器(program counter);
        #2 按照JVM指令逐条执行； - 指令的执行，依赖于JVM不同的内存区域
特征：每种语言的执行模型各不相同，所需要的知识点也各不相同。

Java运行时所提供的编程接口：
#1 用于识别类型的接口 - getClass()：
    作用：当程序运行的时候，开发者可以使用此接口 来 获取到变量的类型信息；
    应用：程序库中，使用 Annotation 进行编程时，经常会使用此接口来获取到Annotation信息；

#2 通过标准库提供的接口，如动态代理；

#3 通过规范提供的接口，如字节码规范。
    实例：Java7中，字节码定义了 InvokeDynamic的新指令，但是语言层面没有提供相关的语法。
    应用：开发者可以根据自己的需要来编写字节码使用此指令。

动态语言的特性 - 会提供一些"运行时接口"给开发者使用；
作用：开发者即使没有定义方法，也能够执行自己想要的语句。
原理：method_missing - 运行时在查找方法时，如果没有找到对应的方法，则：调用语言层面的方法。

语言更靠近开发者，但是运行时在语言之下发挥作用 - 运行时才是语言运行的基础。

recap:
    #1 程序设计语言的具体实现 - 运行时；
    #2 运行时对于开发者不是太容易察觉到 - 就像隐藏在汽车外壳下的引擎；
    #3 Java运行时的工作流程 - {可执行的文件(.class文件), 程序加载机制(加载器 & 内存布局), 程序运行(字节码)}
    #4 Java运行时为开发者提供的接口 - {getClass(), 程序库, 开发规范}





