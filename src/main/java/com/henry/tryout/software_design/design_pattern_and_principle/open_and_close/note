能不能不改动代码，就为系统添加新的功能？
原理：频繁地修改/增加 都会产生非常难以维护的代码；
手段：开闭原则 - 对新增开放，对修改封闭。

开放封闭原则描述：软件系统中的实体(函数、类、模块)应该 - #1 对扩展开放； #2 对修改封闭（不允许修改）；
在遵守此原则的基础上，如果要 为系统引入新的功能/实现新的需求，则：
    新的需求应该用新的代码来实现；
为了能够支持上述要求，就需要：在代码中，预留好 用来新增代码的扩展点(extend point)；

应用实例：一个酒店预定系统；
需求：对不同级别的用户，给出不同的房间折扣；
    规则：#1 普通用户 全价; #2 金卡用户 8折; #3 银卡用户 9折;
新增需求：添加一个用户级别 - 白金用户 7.5折；
手段1：修改代码，添加一个else分支；
手段2：修改设计，使得设计可以扩展；
分析：
    #1 当用户级别不同时，在系统中，用户的行为就会有各种差异。
    #2 每次修改，其实都是添加了一个用户级别 => 一个叫做"用户级别"的模型呼之欲出
具体实现：
    #1 添加一个接口 来 表示“用户级别”这个模型；
    #2 添加不同的类实现接口，从而具体实现 不同的用户级别；
    #3 把"用户级别"这个模型，作为用户的一个成员属性；
    #4 在客户端代码中，
效果：
    #1 client代码的getRoomPrice()方法实现中，不再需要使用if/else...这样的分支结构；
        原因：先前的条件判断逻辑，被分散到不同的UserLevel实现类中了
    #2 扩展点的含义 - 以此为基础，能够扩展出新的类 来 实现新的需求；
衍生问题：
    #1 原本的if/else虽然难读，但是都集中在一处。现在分散到了不同的子类中，这会降低可读性吗？
    不会。因为：
        #1 各个子类的名称能够提供很好的语义；
        #2 client的代码被极大地简化(由于多态), 因此client代码能够更直接地描述业务；
        #3 client的代码变得稳定了，开发者就更有信息把它用作基础组件，去构造其他模块。

======
构建扩展点

好的软件系统 = 稳定的小模块集合 {moduleA, moduleB...moduleN} + 组合多个小模块的大模块 -> 提供软件系统的对外功能

目标：构建稳定的模块；
手段：分离关注点，构建出合适的模型；
抽象做法：分隔特性，找出共性。
应用实例：报表服务；
工作流程：#1 取出当天的订单； #2 生成订单的统计报表； #3 把统计结果发给相关的人员；
代码示例 & 根据开闭原则重新设计的结果： report_service_demo
整体而言，每进行一次模型的构建，最核心的类就会更加稳健一些。

事实：好的设计都会提供足够的扩展点，用来给新的功能使用。
比如， Unix编程的哲学 - 提供机制（what need to be done），而不是提供策略(how to get it down)
再比如，很多软件系统都有插件机制 - 比如 VS Code等编辑器

反思：可以使用源码控制系统来找到最经常被变动的文件 - 它们一般都没有满足开闭原则。
可以从它们入手，改进系统

===
Recap：
#1 开闭原则 - 软件系统在引入新的功能/实现新的需求时，应该 对扩展开放，对修改关闭；
#2 设计一个软件系统时，尽可能地预留扩展点；
    手段：{拆分特性, 找出共性}
#3 学习优秀的软件系统所提供的扩展能力。

