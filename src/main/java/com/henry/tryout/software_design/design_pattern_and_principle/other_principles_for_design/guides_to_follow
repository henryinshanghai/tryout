更高层的一些原则 - 没有告诉你具体要怎么做，但是告诉你什么做法是不对的

#1 KISS； keep it simple, stupid.
具体实践：使用尽可能简单的做法；
#1 有现成的程序库，则：不用自己手写；
#2 如果能够使用文本协议，则：不使用二进制协议；
#3 保持方法实体的简洁；
#4 除非必要，不要添加新的功能；

#2 YAGM： You are not gonna need it.
具体实例：强大的word VS. 简单的Markdown。

#3 DRY： don't repeat yourself;
解释：如果在两个不同的地方，事情的表达形式不同，但事情表达的内容却可能是相同的 - 这也是一种重复。
代码示例：DRYDemo

启示：
#1 注释和代码之间存在重复 -> 想办法把代码写得更加清晰；
#2 内部API在不同的使用者之间存在重复(???) -> 使用中立的方式定义API(?)，然后用工具生成文档；
#3 开发者之间做的事情存在重复 -> 有效沟通

#4 Simple Design 简单设计原则 - 在工作中更加实用；
    #1 通过所有测试；
    #2 消除重复；
    #3 表达出开发者的意图；
    #4 让类和方法的数量最小化。

---
{通过所有的测试}；
作用：保证系统能够按照预期地工作；
手段：单元测试 + 自动化测试；

{消除重复, 表达出开发者的意图, 让类和方法的数量最小化}
作用：指出重构代码的方向；
消除重复； 手段 - 发现重复；
表达开发者意图； 手段 - 代码要说明业务上做了什么，而不是怎么做
让类与方法的数量最小； 手段 - 除非需要一个设计(留好扩展点)，否则不要贸然引入设计


