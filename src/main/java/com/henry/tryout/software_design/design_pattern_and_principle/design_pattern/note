设计模式 - 一种针对特定场景的 特定的解决方案

起源：建筑行业；
引入开发领域： Kent Back;
登堂入室：《设计模式》

学习建议：
#1 不要贪多求全，收效不高；
#2 学习某个设计模式时，切入点是 该设计模式的使用场景

=====
好的实践：从原则 到模式；
原理：如果在设计时遵守 SOLID原则，则：一般能够得到 符合模式的代码结果。

代码示例：
业务需求1：在用户注册完成后，相关信息会发给后台的 汇总模块；
代码参考：{UserSender, UserCollectorSender}

业务需求2：把用户注册成功的消息 通过短信通知给用户；
特征：这会用到第三方服务；
代码参考：{UserSMSSender}

新增业务需求3：对用户信息进行脱敏处理，保证敏感信息不会泄露；
新增业务需求4：在信息发送成功后，进行统计（以便知道系统统共发出了多少信息）；
特征：这样两个需求，都是消费相同的参数(用户信息) - 按照开闭原则，可以抽取出{公共模型 + 具体实现类}
设计结果[new_design]： {BaseUserSender[公共模型], UserCollectorSender, UserSMSSender}

现象：UserCollectorSender, UserSMSSender类中send()方法的代码有很大的重复；
做法：根据？？？原则，对两个子类中的共性部分进行抽取，添加到父类 BaseUserSender 中去;
重构结果： new_design_further

查看最终得到的代码，启示就是符合Template Method模式的代码设计了。
特征：在父类中实现算法模板 与 抽象步骤 & 在子类中提供步骤的特定实现

结论：遵守设计原则，一点点修正代码，往往就能够得到符合某个设计模式的设计了 - 而不是根据设计模式，硬套使用场景。
衍生结论： 设计模式，只是设计原则在特定场景下的应用。