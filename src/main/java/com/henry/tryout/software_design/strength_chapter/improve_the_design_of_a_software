认识：
    #1 软件设计是一门关注长期变化的学问。
    #2 很多项目突出一个字：莽。压根就没设计
    #3 最初有设计的项目，也很可能因为时间积累、人员的更替、把前人做法当成惯例等等因素，而变得腐坏。// 积重难返
    #4 新的技术与框架不断涌现，旧代码很难直接享用它们带来的便利。
        比如：Spring项目，就需要开发人员先打一个WAR包，然后再手动部署到Tomcat上去。SpringBoot内嵌了应用服务器，就可以省掉这个步骤

===
改善既有代码的设计：
认识：
    #1 不同量级的系统根本就不是一个系统 - 承载的用户量发生变化，这种变化本身就是一种需求。
    #2 功能实现是为用户做的，而软件设计是为自己/开发者做的。
    #3 设计一个系统 VS. 开启一个系统改进 是两件事情。
    #4 开启系统改进时，要怎么让所有人达成共识 - 这个问题不在改进设计的scope中。
有效的方向：
    找到要改进的目标 aka 一个系统本来应该有的样子。

假设所有人都已经达成共识（系统需要进行改进），现在要怎么进行改进呢？
手段1：如果还能够找到原始需求文档的话，对着文档重新设计； // 这种情况很少见，项目时间越久，文档越难以找到
手段2：从接口入手。
    认识：对于一个软件系统来说，接口 是引发系统内部状态发生变化的原因。 - 任何系统的变化都是从某个接口开始的
    接口的含义：
        #1 语法层面来说，接口是一个抽象行为；
        #2 对于模型来说，接口是模型之间交互的手段；
        #3 软件系统层面来说，接口是系统对外提供的能力；
            从这个视角来看，后台服务 就只是 按照某种规则触发模型的接口。
            示例： 定时服务 - 就是 定时调用模型的接口。
重新设计的要点：
    #1 该分离的进行分离；
    #2 该重新组合的进行重新组合；
原始设计的一般痛点：把各种信息混在一起。 所以，能够把混在一起的信息拆开，就已经是设计上的一个巨大进步。
好的策略：一点点的改进，积小胜为大圣。
坏的策略：停下整个项目，一步到位 - 这样极可能项目都启不起来...






