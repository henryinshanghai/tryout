软件系统示例：金融指数系统
业务概念：指数 - 金融市场会使用各种"Index" 来 指示当前市场的状态；
    指数的类别：股票指数、期货指数
    具体知名指数：道琼斯指数、标准普尔指数
业务功能：系统会根据各种指数的时时值，来计算出一个结果。
X = Index01 * 0.2 + Index02 *1.0 + Index03 * 0.5
相当于一个 f(a, b, c)函数

怎么设计这样一个软件系统呢？
手段1：先获取到各个指数，然后拼接到公式中，完成计算逻辑；
特征：这种做法会引起大量的重复

手段2：先划分职责，然后针对不同的职责做不同的开发。
#1 划分职责 - {获取各种不同的指数, 进行公式计算}
#2 针对性开发：
    #1 获取实时的指数数据；
        具体问题：怎么管理不同的数据源？ 数据源的数据格式是不是统一的？数据源不可用时，要怎么办？

    #2 进行公式计算，得到预期的结果：
        具体问题： 公式中使用到了那些个指标？指标数据不可用的时候，要怎么办？

拆分结果 & 组合拆分结果的示意图：
[retrieve index data] -> [sequential data] // 按照时间排序的数据序列 -> [calculate formula] => 最终结果

===
拓展设计：
从业务角度来说，业务上的变化 很可能导致公式的变化。
基于这种认识，我们要重新考虑：公式应该写在代码中吗？
目标：当公式发生变化的时候，能够 以最小的阻力完成 公式更新的业务需求。
可能的手段： {#1 开发人员修改代码，然后手动部署测试、#2 开发人员修改代码，而后自动部署、
            #3 开发人员修改配置项、#4 业务人员修改配置字段}
认识：简单的变更方案 需要有好的设计来支持；
    #1 修改配置的方案 - 需要在设计时，预留好可扩展的接口
    #2 业务人员修改配置 - UI配置页面 -> 业务接口 -> 修改完成配置；

业务人员使用UI页做配置时，应该能够配置哪些信息？
#1 修改 index；
#2 修改 计算公式；
为了让业务人员 修改计算公式后，公式能够被正常执行；
手段：解析文本执行 - 需要使用编译原理的一些知识 （ANTLR工具）

======
Recap：
衡量软件系统的设计水平的依据：
#1 有没有实现自动化（部署、测试）；
#2 需不需要开发人员改代码；
#3 需不需要开发人员改配置文件；
#4 业务人员能不能修改配置UI页面。

