程序设计语言的三要素：{语法，程序库，运行时}

消除重复；
手段1：函数；
手段2：程序库；
    分类1：开发包中提供的标准库；
    分类2：第三方开发的程序库；
        不同的语言都会有 管理第三方包的工具 - 比如Java使用Maven来管理第三方程序库。

===
程序语言的设计，其实就是 程序库的设计。
规律：常见的编码模式，就有可能会被语言吸收，成为语言的一部分。
实例：
常见的编码模式：
    #1 申请一块内存；
    #2 为这块内存地址赋值；
对应的语法：new；


语言开发者 提供语言的接口；
语言使用者 利用语言的接口编写程序；
因此，只要两个角色约定了共同的接口，就能够各自独立地做自己的工作。

使用设计模式，可以弥补语言本身的缺陷。
比如：Java中，构造方法本身必须是类的名字，没办法体现构造的逻辑。

Java中对 synchronized关键字的改进：
    synchronized的特征：加锁粒度太大，不方便做更具体的控制；
    JDK5中提供了新的编程模型 - 并发编程库

语言的进化方向：
    #1 有些好用的程序库就可能转正成为语法 - 比如Java的lambda表达式；
    #2 有些语法，是为了"使程序库表现得更好"而存在的 - 比如Java中的Annotation；

recap:
    学习一门编程语言的关键在于：
    #1 了解语言所提供的编程模型；
    #2 学习语言为编程模型所提供的语法；
    #3 学习一些又语言特性的程序库。
