基于对象 = 封装 + 继承；
面向对象 = 封装 + 继承 + 多态(polymorphism);

是：Java提供的一种语法；
作用：一个接口，多种实现形态；
特征：
    #1 使用多态，能够灵活地应对需求地变化；
        手段：开发者在编写client代码时，使用父类进行编码 —— 在需要改变时，开发者就只需要修改变量初始化的代码
    #2 在Java语言中，开发者实现多态时会依赖于继承；
    #3 原则上讲，只要多个子类型能够遵守相同的接口，那么接口类型就能够表现出多态；
用法：
    寻找不同事物的共性，从而提供高级别的抽象；
===
统一术语：接口 = {父类、抽象类，接口}
接口 与 抽象的关系
#1 接口的存在，隔离了抽象中不变的部分(接口中的决定) 与 抽象中易变的部分(子类各自的实现)；
#2 接口的存在，定义了类与类（模块）之间通信的协议；
#3 作为开发者，应该谨慎地选择接口中的方法；
===

Java中实现多态的原理：
    Java限制了"函数指针"的使用，从而约束了 “开发者对程序控制权的间接转移”；
背景：
    #1 结构化编程语言中开发者就可以直接使用函数指针 - 语言层面就可能出现问题，只能通过开发者的自我修养避免
    #2 Java(作为面向对象编程语言)的做法：
        #1 在语法层面，对开发者的行为做出限制；
        #2 并在运行时中实现了 "给函数指针进行赋值"的操作
---
Java中函数指针的工作原理：
    #1 在编译类时，Java会为类中的方法(如method01)在 “虚拟函数表”中找到一个位置；
    #2 然后把 "函数指针"的地址 写入到#1中位置上去。
特征：
    每个子类，都会对应一张虚拟表？
用法：
    #1 开发者层面 - 在代码中使用 接口类型的变量 来 调用对应的函数；
    #2 执行层面 - 相当于在对应的虚拟函数表中进行一个偏移，从而找到真正需要被调用的方法。
---
应用：
    多态成为语言内置的语法后，作为开发者，就不需要/能够 显式地使用函数指针了 - 犯错误的可能性也就更低了

recap:
#1 封装 - 抽象出对象的行为，方便对象之间的组装；
#2 继承 - 为继承体系中的所有对象添加统一的约束 / 提供一致的行为；
#3 多态 - 使类的继承体系能够更好地应对未来需求的变化；
