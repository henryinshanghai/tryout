变量的可变性引发的问题：
单线程下工作的代码，在多线程条件下，可能会出错。
特征：
    如果某个字段是可变的，并且会被多个对象共享，则：多线程条件下，这个字段就会导致问题。
结论：
    多线程本身是一个全新的关注点，不要轻易引入。

函数式编程中的不变性：
特征：
    #1 变量被初始化后，不能够再被重新赋值；- 开发者无法显式地改变一个量
    #2 函数没有任何的副作用 - 不会改变传入的参数值；- 开发者无法隐式地改变一个量
应用：
    #1 多线程编程时，不用考虑此变量的线程安全性 - 因为不管哪个线程，取用的变量值都是一样的
    #2 多线程编程时，函数调用会返回确定的结果 - 计算过程本身不会引起任何变化；

传统编程方式 - 开发者一直在改变变量的值，以期望set出一个想要的结果；
函数式编程方式 - 每次都是执行计算，产生新值

用法：
    #1 编写不变类； - 对象一旦创建，就不能在发生改变 比如String类型；
        手段：
            #1 所有字段都只在构造函数中进行初始化；
            #2 类中所有的方法都需要是纯函数；
            #3 如果client代码有修改的需求，则：返回一个新的对象。
    #2 client代码要求修改时，返回一个新的对象；
    #3 编写一个纯函数；
        手段：
            #1 方法中不修改任何的字段；
            #2 方法中不调用任何修改字段内容的方法；
        特征：
            #1 如果需要使用变量的话，则：使用方法的局部变量；
            #2 鼓励使用final修饰符 - 如果添加了final修饰符，则：编译器会约束被修饰者的可变性；

---
经验：大多数涉及到可变性的代码，应该都是 用来与外部系统打交道的。

不变性的新编程语言的影响：
Rust中，默认声明出的是值，而不是变量；

recap:
#1 变量的可变性，可能会引发很多问题(比如多线程下变量的线程安全性)；
#2 函数式编程的特性 - 不变性 = {没有副作用, 没有状态, 引用透明}；
#3 Java中对不变性好的实践 - {编写不变类, 编写纯函数, 尽量使用final}
