组合：把一个函数作为另外一个函数的参数的行为，叫做组合。
作用：不同函数的功能可以被叠加起来，从而解决更大的问题。
原理：
    如果可以接收函数作为参数的话，则：就可以把一些处理逻辑外置出去 - 这样client代码的写法就会更简洁
应用：简化client代码的编写，比如程序库本身就不再需要完备的功能。
用法：
    #1 server的工作 - {#1 提供构造块； #2 提供构造块之间组合的方式}
    #2 client的工作 - 按需组合server所提供的构造块；
评论：函数式编程的组合特性，就是一种好的设计方式。

======
列表转换
Lisp - List Processing
原理：大部分的操作，最终都能够转化成为 列表转换;
用法：
    列表转换的3中常见模式 - {转换item, 过滤item, 归约集合中的item}
详解：
    #1 map；- 作用：把一组数据 映射/转化成为 另一组数据；
    #2 filter - 作用：从一组数据中筛选出 满足条件的数据；
    #3 reduce - 作用：从一组数据中，按照特定的规则，得到单一的一个数据；
特征：
    #1 列表转换所提供的其他操作，基本上都是在map、filter、reduce的基础上做了封装的结果 - 比如count()方法
    #2 为了简化lambda表达式，有时候可以使用方法引用的方式 执行action。

代码示例：com/henry/tryout/java_8_features/lambda_01

===
面向对象中的组合 VS. 函数式编程中的组合
组合的是类&对象    组合的是函数

应用：
#1 使用OOP来搭建系统的骨架 - 房梁；
#2 使用FP来设计函数接口 - 窗户；

