几种常见的编程范式：
#1 结构化编程 - structured programming
#2 面向对象编程 - object-oriented programming
#3 函数式编程 - functional programming

===
结构化编程
特征：结构化的控制结构；
实例：
    if/else 选择结构
    do/while 循环结构
代表语言：
    C语言

===
面向对象编程
核心概念：对象；
特征：
    #1 程序 = 对象之间的交互过程；
    #2 多态 - 用于管理程序的复杂性
代表语言：Java

===
函数式编程
核心概念：函数；
特征：函数的不变性；
代表语言：LISP。

编程范式的作用 - 约束开发者的能力；
具体实现：
#1 结构化编程 - 限制goto语句, 约束了开发者 直接对程序控制权进行转移的能力；
#2 面向对象编程 - 限制使用函数指针,约束了开发者 间接对程序控制权进行转移的能力；
#3 函数式编程 - 限制使用赋值语句, 约束了开发者 所能够进行的赋值操作

===
使用多范式来编程

场景 & 该场景应该使用的编程范式
组织程序    面向对象编程
设计类的接口  函数式编程
实现具体方法  结构化编程

recap: 编程范式的作用 - {为开发者#1 提供招式, #2 添加约束}