## #macro指令 - 用于定义一个VTL模板的重复代码块(宏)
## 语法
#*
## 定义一个名字叫d、没有参数的宏
#macro(d)
    <tr><td></td></tr>
#end

## 使用宏
I'm #d() Batman!
*#

## 带参数的宏 -
## 特征： 1 在velocity中不能进行方法的重载
## 宏的参数可以是以下VTL元素中的任意一种：
## 引用、字符串字面值、数值字面值、整数范围(比如[1 .. 10]、[$start .. $end])、数组、布尔值true或者false
## 宏的参数可以是方法
#macro(d $name)
    <tr><td>$name</td></tr>
#end

## 使用 带参数的宏
you are #d("superman")!

## 参数是一个方法的宏
#macro(test $a)
    $a $a $a
#end

#test($customer.getBehaviour()) ## 这里作为参数的方法会被执行3次

#*
其他特性：
1. 当宏是在一个Velocity模板中定义时，这个宏(是inline的)只能被该模板使用，同一个网站下的其他模板是不能用的；
2. 如果是在一个Velocity宏模板库中定义的宏，就可以被任何同一网站下的模板使用；
3 与宏相关的一些个Velocity属性：
    Ⅰ velocimacro.library——用逗号分隔的一组文件名，是Velocity宏模板库。默认值是VM_global_library.vm

    Ⅱ velocimacro.permissions.allow.inline——宏是否可以在一个普通模板中定义。默认值是false。

    Ⅲ velocimacro.permissions.allow.inline.to.replace.global——是否允许模板中的宏覆盖library中的宏。默认值是false。

    Ⅳ velocimacro.permissions.allow.inline.local.scope——一个在普通模板中定义的宏，是否允许其他模板使用。默认是false。

    Ⅴ velocimacro.context.localscope——在一个宏里通过#set()修改了context，此修改是否仅仅对这个宏自身，而不是永久性修改了context。默认值是false。

    Ⅵ velocimacro.library.autoreload——Velocity宏模板库修改之后，是否自动重新加载。默认值是false。debug时可以设置为true，发布时设置为false
4. 宏必须在第一次使用它之前定义 ———— 当#Parse()一个模板文件时，尤其要注意这一点
*#
